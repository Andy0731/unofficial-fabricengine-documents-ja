#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:4
msgid "Manipulation Extension"
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:10
msgid "|FABRIC_PRODUCT_NAME| version |FABRIC_VERSION|"
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:11
msgid "|FABRIC_COPYRIGHT|"
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:13
msgid ""
"The Manipulation extension provides tools for defining custom user "
"interaction models based on events propagated from a host DCC application or"
" custom tool."
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:16
msgid ""
"The Manipulation system provides a flexible and low level api that enables "
"any custom tool to be build based on the provided events. No assumptions are"
" made about the type of tool being build, or how manipulations should be "
"defined. The major DCCs expose APIs for developing custom tools that are "
"heavily limited in flexibility due to the assumptions made about the kinds "
"of tools that TDs in production might need to build."
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:25
msgid "Events"
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:26
msgid ""
"The Manipulation systems are defined around custom event handling. Events, "
"usually sent from Fabric running in a DCC such as Maya, are handled via "
"custom event handlers."
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:29
msgid ""
"The Events in Fabric Engine are modeled after the events generated by Qt. We"
" have :kl-ref:`KeyEvent`, :kl-ref:`MouseEvent` and :kl-ref:`MouseWheelEvent`"
" objects that have similar methods and members as the Qt events. This makes "
"it easy to integrate the manipulation system into applications using the Qt "
"event system. For example Maya uses Qt for window management, so the Qt "
"events can be easily translated into Fabric Engine events and sent to our "
":kl-ref:`EventDispatcher` via the :kl-ref:`EventDispatcherHandle`."
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:36
msgid ""
"Each Fabric Engine integration converts events from the exposed tools API to"
" the :kl-ref:`EventDispatcher` in KL. While we have made every effort to "
"ensure the events sent from the DCCs are similar in some cases it has not "
"been possible to propagate all events."
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:40
msgid ""
"In Maya, we have hooked an event filter directly into the Main Window and "
"are able to propagate all Qt events into the KL :kl-ref:`EventDispatcher`. "
"In Softimage we do not have the ability to install an event filter so are "
"limited to the events sent by the Softimage custom tools API."
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:46
msgid "Manipulators"
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:47
msgid ""
"Only one manipulator can be active at any given time. All events from the "
"DCC are propagated to the active manipulator for handling."
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:50
msgid ""
"If an event is sent to the manipulator, but the manipulator doesn't handle "
"the event, then the event is propagated back to the host DCC application."
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:55
msgid "Undo Redo"
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:57
msgid ""
"As a manipulator handles events, it can generate changes in the Fabric "
"Engine data. These changes can be stored in the Host DCC undo stack via the "
"method :kl-ref:`Host.addUndoRedoCommand`, which pushes KL Command objects "
"onto the Host DCC undo stack. This enables artists to use undo and redo with"
" the custom manipulators defined in KL."
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:62
msgid "Table of Contents"
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:73
msgid "Indices and Tables"
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:75
msgid ":ref:`genindex`"
msgstr ""

#: ..\..\source\KLExtensionsGuide\Manipulation\index.rst:76
msgid ":ref:`search`"
msgstr ""
