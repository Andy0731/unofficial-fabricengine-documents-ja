#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: 2015-11-21 15:32+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja_JP\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.5\n"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:4
msgid "Using spatial queries with geometries"
msgstr "ジオメトリを用いた空間分析群(Spatial queries)の使用"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:6
msgid ""
"Spatial queries are a set of operations which perform searches based on "
"geometric position. Common spatial queries include finding a ray "
"intersection (`raycast`), finding the closest surface (`getClosest`), or "
"searching an intersection with a volume like a sphere. The :kl-"
"ref:`SpatialQueryable` interface allows to perform various spatial queries "
"on :kl-ref:`Geometry` types such as the :kl-ref:`PolygonMesh`, the :kl-"
"ref:`Lines` and the :kl-ref:`Points`."
msgstr ""
"空間分析群はジオメトリックポジションに基づいて検索を行う一連の操作です。一般的な空間分析群には、線交点の発見( 'raycast' "
")、最も近いサーフェースの発見( 'getClosest' )またはスフィアのようなボリュームとの交差を検索することが含まれます。 :kl-"
"ref:`SpatialQueryable` インターフェースは :kl-ref:`PolygonMesh` 、 :kl-ref:`Lines` や "
":kl-ref:`Points` といったような :kl-ref:`Geometry` 型で様々な空間分析を実行することができます。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:13
msgid ""
"When multiple spatial queries are performed on a same geometry, an "
"acceleration structure can greatly improve the performance. The :kl-"
"ref:`SpatialQueryable` implementations of built-in :kl-ref:`Geometry` types "
"can internally cache an acceleration structure. The acceleration structure "
"needs to be properly prepared and updated before performing queries; see "
":ref:`spatialqueryaccelerationstructures` for more details."
msgstr ""
"同じジオメトリ上で複数の空間分析が実行されるとき、高速化構造はパフォーマンスを大きく向上できます。 :kl-ref:`Geometry` 型を組み込んだ"
" :kl-ref:`SpatialQueryable` "
"の実行は内部に高速化構造をキャッシュできます。高速化構造は分析を実行する前に更新し適切に準備する必要があります。詳細については "
":ref:`spatialqueryaccelerationstructures` を参照してください。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:21
msgid ""
"Performing spatial queries on a geometry is thread safe if the geometry is "
"not modified and no calls are made to :kl-"
"ref:`SpatialQueryable.prepareForSpatialQueries` or :kl-"
"ref:`SpatialQueryable.removeSpatialQueryAcceleration`."
msgstr ""
"ジオメトリ上での空間分析の実行は、ジオメトリの変更が無く、 :kl-"
"ref:`SpatialQueryable.prepareForSpatialQueries` かもしくは :kl-"
"ref:`SpatialQueryable.removeSpatialQueryAcceleration` "
"の呼び出しがない場合に限りスレッドセーフです。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:64
msgid "Using the SpatialQuery object"
msgstr "空間分析(SpatialQuery)オブジェクトの使用"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:66
msgid ""
"Some queries, such as :kl-ref:`SpatialQuery.getElementsInBBox`, are only "
"accessible through to a :kl-ref:`SpatialQuery` object. The :kl-"
"ref:`SpatialQuery` object is obtained by calling :kl-"
"ref:`SpatialQueryable.beginSpatialQuery`, and needs to be used temporarily "
"until released by a call to :kl-ref:`SpatialQueryable.endSpatialQuery`."
msgstr ""
":kl-ref:`SpatialQuery.getElementsInBBox` のような幾つかの分析は :kl-ref:`SpatialQuery` "
"オブジェクト経由でのみアクセス可能です。 :kl-ref:`SpatialQuery` オブジェクトは :kl-"
"ref:`SpatialQueryable.beginSpatialQuery` を呼び出すことで取得し、 :kl-"
"ref:`SpatialQueryable.endSpatialQuery` の呼び出しによって解放されるまで一時的に使用される必要があります。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:71
msgid "A :kl-ref:`SpatialQuery` object is valid if:"
msgstr ":kl-ref:`SpatialQuery` オブジェクトが有効な状況は.."

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:73
msgid ""
"it is used in the local scope between :kl-"
"ref:`SpatialQueryable.beginSpatialQuery` and :kl-"
"ref:`SpatialQueryable.endSpatialQuery` (same thread)"
msgstr ""
"(同じスレッド内の) :kl-ref:`SpatialQueryable.beginSpatialQuery` と :kl-"
"ref:`SpatialQueryable.endSpatialQuery` の間のローカルスコープ"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:76
msgid "the geometry is not modified"
msgstr "ジオメトリが変更されていない"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:78
msgid ""
"no calls to :kl-ref:`SpatialQueryable.prepareForSpatialQueries` or :kl-"
"ref:`SpatialQueryable.removeSpatialQueryAcceleration` are made"
msgstr ""
":kl-ref:`SpatialQueryable.prepareForSpatialQueries` か :kl-"
"ref:`SpatialQueryable.removeSpatialQueryAcceleration` が呼び出しが無い"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:81
msgid ""
"it was not released with a call to :kl-"
"ref:`SpatialQueryable.endSpatialQuery`"
msgstr ":kl-ref:`SpatialQueryable.endSpatialQuery` の呼び出しで解放されていない"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:85
msgid ""
"The :kl-ref:`SpatialQuery` object holds the thread-specific temporary "
"storage needed for efficiently performing one or multiple queries. These "
"objects are recycled internally for a better performance."
msgstr ""
":kl-ref:`SpatialQuery` "
"オブジェクトは1つまたは複数の分析を効率的に実行するために必要なスレッド固有の一時記憶を保持します。これらのオブジェクト群は、パフォーマンスの向上のために内部でリサイクルされます。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:89
msgid ""
"A call to :kl-ref:`SpatialQueryable.beginSpatialQuery` is thread-safe, but "
"the returned :kl-ref:`SpatialQuery` object is not (should only be used "
"locally)."
msgstr ""
":kl-ref:`SpatialQueryable.beginSpatialQuery` の呼び出しはスレッド セーフですが、返された :kl-"
"ref:`SpatialQuery` オブジェクトはそうではありません (ローカルのみで使用すべきです)。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:92
msgid ""
"The following example demonstrates proper multithreaded usage of a :kl-"
"ref:`SpatialQuery` :"
msgstr "次の例では、 :kl-ref:`SpatialQuery` の適切なマルチ スレッドの使用法を説明します。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:125
msgid "GeometryLocation structure"
msgstr "ジオメトリロケーション構造"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:127
msgid ""
"For methods such as :kl-ref:`SpatialQueryable.raycast`, where the result is "
"a specific surface point, a :kl-ref:`GeometryLocation` structure is "
"returned. The content and meaning of the :kl-ref:`GeometryLocation` members "
"is specific to each :kl-ref:`Geometry` type:"
msgstr ""
":kl-ref:`SpatialQueryable.raycast` "
"のようなメソッド群において、分析結果はサーフェース上の特定のポイント(位置)を指し、 :kl-ref:`GeometryLocation` "
"構造が返されます。 :kl-ref:`GeometryLocation` メンバーの内容と意味は、下記の各 :kl-ref:`Geometry` "
"型で特有です。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:131
msgid ":kl-ref:`PolygonMesh`:"
msgstr ":kl-ref:`PolygonMesh`:ポリゴンメッシュ"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:133
msgid "`index` stores the polygon index"
msgstr "`index` はポリゴンインデックスを保存します"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:135
msgid ""
"`subIndex` stores polygon's sub-triangle index. For example, in a "
"quadrilateral with points [4,5,6,7], triangulated as [4,5,6] and [4,6,7], "
"the `subIndex` for each triangle is 0 and 1, respectively."
msgstr ""
"`subIndex` "
"はポリゴンのサブ・トライアングル・インデックスを保存します。例えば、[4,5,6,7]頂点の四角形における[4,5,6]と[4,6,7]を頂点とする三角形に対し、各三角形への"
" `subIndex` はそれぞれ０と１です。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:138
msgid ""
"`barycentric` store the barycentric weights relative to a triangle's points."
" For a triangle corresponding to attribute values [a,b,c], the resulting "
"attribute value can be computed by the linear combination ``(a * "
"barycentric.x) + (b * barycentric.y) + (c * barycentric.z)``."
msgstr ""
"`barycentric` "
"は三角形の頂点に対する相対的ウェイト値を保存します。三角形は[a、b、c]のアトリビュート値に対応し、結果のアトリビュート値は ``(a * "
"barycentric.x) + (b * barycentric.y) + (c * barycentric.z)`` "
"の線形結合よって算出することができます。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:142
msgid ":kl-ref:`Lines`:"
msgstr ":kl-ref:`Lines`:ライン群"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:144
msgid "`index` stores the line segment index"
msgstr "`index` は線分のインデックスを保存します。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:146
msgid ""
"`barycentric.xy` stores the weights for the start and the end points of the "
"segment, respectively. For a segment where the start and end attribute "
"values are [a,b], the resulting attribute value can be computed by the "
"linear combination ``(a * barycentric.x) + (b * barycentric.y)``."
msgstr ""
"`barycentric.xy` "
"は線分の始点と終点それぞれへのウェイトを保存します。線分への始点・終点のアトリビュート値は[a,b]で、結果のアトリビュート値は ``(a * "
"barycentric.x) + (b * barycentric.y)`` の線形結合で算出できます。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:149
msgid ":kl-ref:`Points`:"
msgstr ":kl-ref:`Points`:ポイント群"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:151
msgid ""
"`index` stores the point index, which is the same as the attribute index."
msgstr "`index` はポイントのインデックスを保存し、アトリビュートインデックスと同じです。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:153
msgid ""
"`barycentric` might store, when applicable, a `normal` relative to the "
"point. This allows to keep the specific surface location when points have a "
"size, and are considered as spheres."
msgstr ""
"`barycentric` 適用可能な時に保存する可能性があり、`normal` "
"はポイントと相対です。これはポイントが球体とみなされ大きさを持つとき、特定のサーフェース・ロケーションを維持することができます。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:159
msgid ""
"A :kl-ref:`GeometryLocation` is valid only for a specific Geometry, or one "
"with an identical structure (`topology`). A :kl-ref:`GeometryLocation` is "
"stable through deformation (animation)."
msgstr ""
":kl-ref:`GeometryLocation` は特定のジオメトリ、または同一の構造( `topology` )において有効です。 :kl-"
"ref:`GeometryLocation` は変形（アニメーション）中でも変動しません。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:163
msgid ""
"The :kl-ref:`GetAttributeAtLocation` helper functions can return the value "
"of an attribute corresponding to a :kl-ref:`GeometryLocation`. These are "
"simple wrappers around :kl-"
"ref:`SpatialQueryable.getLocationAttributeIndicesAndWeights` and attributes'"
" `getLinearCombination` methods."
msgstr ""
":kl-ref:`GetAttributeAtLocation` ヘルパー関数群は :kl-ref:`GeometryLocation` "
"に対するアトリビュート値を返すことができます。これらは :kl-"
"ref:`SpatialQueryable.getLocationAttributeIndicesAndWeights` と、アトリビュートの "
"`getLinearCombination` メソッドをシンプルに内包したものです。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:171
msgid "Acceleration structures"
msgstr "高速化構造"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:173
msgid ""
"Spatial queries can be performed with an internally cached acceleration "
"structure like an :kl-ref:`Octree` or a :kl-ref:`SparseGrid`. Performing "
"multiple queries without a cached acceleration structure can be very slow, "
"particularly on complex geometries. A few rules need to be followed in order"
" to properly use acceleration structures through the :kl-"
"ref:`SpatialQueryable` interface."
msgstr ""
"空間分析は :kl-ref:`Octree` や :kl-ref:`SparseGrid` "
"のような高速化構造の内部キャッシュを用いて実行できます。キャッシュされた高速化構造を持たない複数の分析を実行すると、特に複雑な形状において、非常に処理が遅くなることがあります。"
" :kl-ref:`SpatialQueryable` インタフェースを通した高速化構造を適切に使用するために、いくつかのルールに従う必要があります。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:178
msgid ""
"Built-in geometries (:kl-ref:`PolygonMesh`, :kl-ref:`Lines`, :kl-"
"ref:`Points`) support none, :kl-ref:`Octree` or :kl-ref:`SparseGrid` "
"acceleration structures. These can be specified using the :kl-"
"ref:`SpatialQueryable.prepareForSpatialQueries` options."
msgstr ""
"内蔵のジオメトリ群( :kl-ref:`PolygonMesh` , :kl-ref:`Lines` , :kl-ref:`Points` )は "
"none(つまり持たない)、 :kl-ref:`Octree` 、 :kl-ref:`SparseGrid` "
"のいずれかの高速化構造をサポートします。これらは  :kl-"
"ref:`SpatialQueryable.prepareForSpatialQueries` オプションを使用して指定することができます。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:182
msgid ""
"The default acceleration structure is the :kl-ref:`Octree` since it behaves "
"well in all situations. Both acceleration structures support incremental "
"updates (small change, small update cost). See "
":ref:`octreesparsegridcompare` for a comparison of these acceleration "
"structures."
msgstr ""
"高速化構造の初期設定は、あらゆる状況でうまく動作する :kl-ref:`Octree` "
"です。どちらの高速化構造も、増分の更新（小さな変更、小さな更新コスト）をサポートしています。これら高速化構造の比較は "
":ref:`octreesparsegridcompare` を参照してください。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:186
msgid ""
"The :kl-ref:`SpatialQueryable.prepareForSpatialQueries` method will install "
"or update an acceleration structure in order to accelerate subsequent query "
"calls (which can then be multithreaded). If :kl-"
"ref:`SpatialQueryable.prepareForSpatialQueries` is not called initially or "
"after geometry changes, the geometry will detect it (from attribute and "
"structure versions) and disable acceleration, which can lead to poor "
"performance."
msgstr ""
":kl-ref:`SpatialQueryable.prepareForSpatialQueries` "
"メソッドは、後の分析(マルチスレッド可)の呼び出しを早めるために、高速化構造をインストールまたは更新します。もし :kl-"
"ref:`SpatialQueryable.prepareForSpatialQueries` "
"が最初またはジオメトリの変更後に呼び出されていない場合、ジオメトリはアトリビュートや構造のバージョンの変更を検出すると高速化を無効化し、パフォーマンスの低下につながります。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:194
msgid ""
"When calling :kl-ref:`SpatialQueryable.prepareForSpatialQueries` again after"
" a :kl-ref:`Geometry` type was modified, the acceleration structure will be "
"updated incrementally. This implies that the acceleration structure will be "
"only partially modified to match the changes, which improves the "
"performance. This is particularly helpful during playback, where the surface"
" deformation is typically small from frame to frame."
msgstr ""
":kl-ref:`SpatialQueryable.prepareForSpatialQueries` を :kl-ref:`Geometry` "
"型が変更された後に再び呼び出すとき、高速化構造は増分の更新を行います。これは高速化構造が性能を向上させるために、変化に一致するように一部分だけを変更することを意味します。サーフェースの変形はフレーム間では通常小さなものなので、これは再生中に特に役立ちます。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:201
msgid ""
"The acceleration structures are internally made of compact arrays. Compiling"
" KL in `unguarded` mode will usually speed up spatial queries by 30%."
msgstr "高速化構造は、コンパクトな配列の内部構成です。 `unguarded` モードでのKLコンパイルは、通常は空間分析を30％高速化します。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:204
msgid ""
"The :kl-ref:`SpatialQueryable.removeSpatialQueryAcceleration` allows to "
"delete the acceleration structure and free its memory. However, it is "
"usually not recommended to call this method (see method's description for "
"more details)."
msgstr ""
":kl-ref:`SpatialQueryable.removeSpatialQueryAcceleration` "
"は、加速構造を削除してメモリを解放できます。しかし、通常は（詳細については、メソッドの説明を参照）、このメソッドを呼び出すことをお勧めしません。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:211
msgid "Octree versus SparseGrid"
msgstr "オクトリー(Octree ) vs スパースグリッド(SparseGrid)"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:213
msgid ""
"Here is a quick comparison between the :kl-ref:`Octree` and the :kl-"
"ref:`SparseGrid`:"
msgstr "ここでは :kl-ref:`Octree` と :kl-ref:`SparseGrid` を簡単に比較します。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:215
msgid ""
"Memory: the Octree takes about twice the memory of a SparseGrid. Even if "
"both structures were optimized for a low memory usage, they still require a "
"noticeable amount of memory, which can be comparable to the memory used by "
"the structure of a PolygonMesh."
msgstr ""
"メモリ：オクトツリーはスパースグリッドの約2倍のメモリを要します。しかし両方の構造は低いメモリ使用量に最適化されたとしても、それらはまだ顕著なメモリ量を必要とし、PolygonMesh構造で使用されるメモリに匹敵します。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:219
msgid ""
"A SparseGrid builds and updates faster than an Octree, often by a factor of "
"2 or more."
msgstr "スパースグリッドの構築と更新は、オクトリーよりも多くの場合で2倍以上高速です。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:221
msgid ""
":kl-ref:`SpatialQuery.raycast`: if geometry elements (polygons, points) are "
"relatively uniformly distributed in space, the SparseGrid can be faster by "
"about 30%, but could be slower if the geometric elements' density varies a "
"lot."
msgstr ""
":kl-ref:`SpatialQuery.raycast`: ジオメトリ・エレメント (ポリゴン、ポイント) "
"が空間に比較的均一に分布する場合、スパースグリッドは約30%高速化することができますが、ジオメトリ・エレメントの密度が大幅に異なる場合は遅くなります。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:225
msgid ""
":kl-ref:`SpatialQuery.getClosest`: the Octree is usually much faster than "
"the SparseGrid. The SparseGrid is particularly slow if the search point is "
"far from geometry's surface."
msgstr ""
":kl-ref:`SpatialQuery.getClosest`: "
"オクトリーは通常スパースグリッドよりもはるかに高速です。スパースグリッドは検索ポイントがジオメトリのサーフェスから離れている場合は特に遅くなります。"

#: ..\..\source\KLExtensionsGuide\Geometry\spatialqueriesusage.rst:228
msgid ""
":kl-ref:`SpatialQuery.getElementsInBBox` and :kl-"
"ref:`SpatialQuery.getElementsInBSphere`: the SparseGrid will be faster if "
"the search volume is similar to the distance between geometry elements, and "
"if the geometry elements are relatively uniformly distributed in space."
msgstr ""
":kl-ref:`SpatialQuery.getElementsInBBox` と :kl-"
"ref:`SpatialQuery.getElementsInBSphere`: "
"検索ボリュームがジオメトリ・エレメント間の距離に類似している場合や、ジオメトリ・エレメントが空間に比較的均一に分布している場合、スパースグリッドの方が速くなるでしょう。"
" "
