#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:4
msgid "Using the InlineDrawing extension"
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:8
msgid ""
"Inline Drawing can be used directly without any modification for OpenGL "
"rendering. You can also extend it for other renderers by implementing "
"against the extension's KL interfaces. See the KL types shipped with the "
"extension prefixed with OGL for reference code."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:10
msgid ""
"To use the InlineDrawing in DCC integrations you can simply instantiate the "
":ref:`drawinghandle` object. You should store the :ref:`drawinghandle` on a "
"port within the DCC. For example:"
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:20
msgid ""
"Once that's done you can define shaders. Shaders can be used for a series of"
" materials, so you'll only need one flat shader for example for anything "
"rendered with it. Shaders can be registered by name, but usually you'll want"
" to use the same shader object for anything utilizing a surface shader, for "
"example."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:27
msgid ""
"Now you can build the scene's transforms. This is optional, of course you "
"can draw shapes as well just using the draw's root transform."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:38
msgid "After some transforms have been defined you can define some shapes."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:50
msgid "To draw shapes with given transforms, we can now define materials."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:60
msgid ""
"Finally we can push some instances into the materials, defining a "
"combination of transforms and shapes. Note that you can also set this up the"
" opposite way, by calling :dfn:`addMaterial` on the :ref:`inlineinstance`."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:68
msgid "In Maya, this results in the following:"
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:74
msgid ""
"If you want to render the same shape several times, there are two "
"approaches. Either you create an inline transform for each instance, or you "
"add Statictiple :ref:`xfo` values into the transform. This is done using the"
" :ref:`staticinlinetransform`'s pushLocalXfo method."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:82
msgid "This then results in the red sphere being drawn three times."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:88
msgid ""
"Here's the full source code once more (for easy testing in Maya, for "
"example):"
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:130
msgid ""
"This example uses the :ref:`inlinedebugshape`, but of course you can also "
"use the more efficient shapes such as the :ref:`inlinepointsshape` for large"
" point clouds, :ref:`inlinelinesshape` for rendering lines or fur, "
":ref:`inlinemeshshape` for rendering polygons. Each of these takes the "
"corresponding geometry object as the constructor argument. The corresponding"
" shape adaptors version the used OpenGL buffers against the geometry "
"attributes, so if you deform the original mesh, for example, the shape will "
"automatically re-upload the positions and normals buffer to reflect the "
"change. Please see each shape's documentation page for a code sample."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\usage.rst:132
msgid ""
"Since all main elements of the InlineDrawing system are interfaces, you can "
"extend it with your own custom shapes, custom shaders etc. Furthermore you "
"can use the :ref:`oglinlineshader` directly in your KL code, which allows to"
" edit the GLSL code within the KL code editor window. The "
":ref:`oglinlineshader` can drive the vertex and fragment code, but "
"optionally also the geometry and tessellation code. For this the "
":ref:`oglinlineshader` provides methods to drive the code (for example "
"setVertexCode, setFragmentCode, setGeometryCode etc). See the sample below "
"for an alternative implementation of the flat shader."
msgstr ""
