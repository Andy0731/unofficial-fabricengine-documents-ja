#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\KLExtensionsGuide\InlineDrawing\integration.rst:4
msgid "Integrating InlineDrawing in DCCs"
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\integration.rst:8
msgid ""
"The Inline Drawing extension can be used directly with the provided OpenGL "
"types to render into DCC viewports. This integration is provided for several"
" DCCs, however it can be extended for additional products or in-house "
"systems."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\integration.rst:10
msgid ""
"You can find all of the KL types in the :ref:`inlinedrawing_extension`."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\integration.rst:12
msgid ""
"To ensure that the InlineDrawing is rendered, you'll need to construct a "
"FabricCore::RTVal of the :ref:`drawcontext` object in C++:"
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\integration.rst:18
msgid ""
"You will then need to fill all of its members accordingly. See the KL "
"snippet below for more detail."
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\integration.rst:25
msgid ""
"Once that is done you will need to call into Splice's rendering callback, as"
" seen below, in C++:"
msgstr ""

#: ..\..\source\KLExtensionsGuide\InlineDrawing\integration.rst:42
msgid "This will render the content into the DCCs viewport directly."
msgstr ""
