# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2016 Fabric Software Inc
# This file is distributed under the same license as the Fabric Engine
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-12 15:40+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.3\n"

#: ../../source/KLExtensionsGuide/RTR2/index.rst:4
msgid "RTR2 Extension"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:10
msgid "|FABRIC_PRODUCT_NAME| version |FABRIC_VERSION|"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:11
msgid "|FABRIC_COPYRIGHT|"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:13
msgid ""
"The ``RTR`` extension provides multiple components that can be assembled "
"for building a customized rendering pipeline. The RTR's goal is to "
"provide a good balance between performance and flexibility."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:17
msgid ""
"\\note Various RTR samples are located in the ``/Samples/RTR2`` and can "
"be run with the ``rtr2Test`` launcher, for example ``rtr2Test "
"/Samples/RTR2/MovingHierarchy.kl --unguarded``."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:20
msgid "Base interfaces and components"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:22
msgid "The RTR defines multiple types of base components and interfaces, such as:"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:24
msgid ""
"The :kl-ref:`RTRScheduler`, which allows to dynamically queue or schedule"
" RTR processing tasks (:kl-ref:`RTRTask`) or drawing tasks (:kl-"
"ref:`RTRDrawTask`):"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:27
msgid ""
"A :kl-ref:`RTRTask` is doing data preparation work, such as updating data"
" associated to scene elements, or setting material parameters for draw "
"instances. These tasks might be evaluated in parallel and don't require a"
" valid draw context."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:32
msgid ""
"A :kl-ref:`RTRDrawTask` is doing draw calls with as low overhead as "
"possible since these are executed on the draw thread"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:35
msgid ""
"The :kl-ref:`RTRContext`, which provides the relevant contextual "
"information for the tasks, such as the scene, the animation time and the "
"camera"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:38
msgid ""
"The :kl-ref:`RTRInstance`, which represents a scene object such as a :kl-"
"ref:`Geometry` instance. These are associated to a :kl-ref:`RTRMaterial`,"
" and children :kl-ref:`RTRDrawInstance` can complete the :kl-"
"ref:`RTRInstance` with material parameters that depend on the context "
"(eg: the `modelViewMatrix`, which depends on the :kl-ref:`RTRDrawSurface`"
" and :kl-ref:`RTRCamera`)"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:43
msgid ""
"A :kl-ref:`RTRMaterialLibrary`, which allows to share materials "
"associated to shader files. The materials can either be:"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:46
msgid ""
"a simple :kl-ref:`RTRMaterial`, such as the :kl-ref:`RTROGLProgram`, "
"which defines a static parameter set and default values for the "
"parameters (default values are defined as metadata in the shaders' code)"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:50
msgid ""
"a generic material (:kl-ref:`RTRBaseGenericMaterial`), which provide "
"\"templated\" material programs which will be specialized depending on "
"generic parameters such as custom light or surface types (generic "
"parameters are defined as metadata in the shaders' code)"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:56
msgid "Higher-level interfaces and components"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:58
msgid ""
"Then, the RTR defines higher-level or more specialized components, such "
"as:"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:60
msgid ""
"The :kl-ref:`RTRSWGeometryInstance`, which binds data from a scene "
"geometry (:kl-ref:`SWElementReference`) to material parameters. These can"
" be generated by a :kl-ref:`RTRSWGroupToInstanceTask` that maps scene "
"geometry transformed instances to :kl-ref:`RTRSWGeometryInstance` "
"objects."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:64
msgid ""
"The :kl-ref:`GLStandardRTR`, a simple GL forward renderer that assigns "
"lights to :kl-ref:`RTRDrawInstance` objects"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:66
msgid ""
"The :kl-ref:`RTROGLAmbientLight` and :kl-ref:`RTROGLDirectionalLight`, "
"which are examples of generic program sources (:kl-"
"ref:`RTRGenericMaterialSource`) that can specialize the lighting of a "
"generic OpenGL material (:kl-ref:`RTROGLGenericProgram`)"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:73
msgid "Related extensions"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:75
msgid ""
"The following extensions work in conjunction with the RTR extension at "
"various levels:"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:77
msgid ""
"The Adaptors extension allows to define target-specific :kl-"
"ref:`ObjectAdaptor` that can manage and cache the conversion from source "
"objects (such as a :kl-ref:`PolygonMesh`) to a specific target (such as "
"OpenGL RTR). These adaptors can enable custom object types to be provided"
" to the RTR with RTR specific types and interfaces."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:83
msgid ""
"The SceneInterfaces extension defines generic interfaces and objects that"
" abstract specific scene implementations such as the :kl-"
"ref:`SceneGraph`. In particular, it defines:"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:87
msgid ""
"The :kl-ref:`SWElementReference`, which allow to access associated values"
" and track their changes by providing a version"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:89
msgid ""
":kl-ref:`SWDynamicGroup` objects, which provide groups of :kl-"
"ref:`SWElementReference`. These can feed the RTR and allow efficient "
"incremental updates under scene changes."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:92
msgid ""
"Adaptors associated to :kl-ref:`SWElementReference` source objects, which"
" allows to share RTR conversion data (such as GL buffers) by attaching "
"these to the shared source objects (such as a :kl-ref:`PolygonMesh`)."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:96
msgid ""
"The :kl-ref:`SceneGraph` extension provides an implementation of the "
"generic SceneInterfaces interfaces, which allows the RTR to efficiently "
"filter and process the SceneGraph content without depending on its "
"implementation details."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:100
msgid ""
"The SceneGraphWrappers define higher-level scene graph objects, such as "
"the :kl-ref:`SGInstance` and the :kl-ref:`SGGeometry`. These implement "
"generic interfaces such as :kl-ref:`SWTransformed` which allow for a "
"closer interaction with the RTR."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:104
msgid ""
"The :kl-ref:`GeometryToRTR` extension defines some :kl-ref:`Geometry` "
"specific RTR adaptors, such as the :kl-ref:`PolygonMeshToRTR` or the :kl-"
"ref:`Vec3AttributeToRTR` adaptors."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:107
msgid ""
"The SceneGraphToRTR extension defines adaptors for some SceneGraphWrapper"
" objects to the RTR, such as :kl-ref:`SGDirectionalLightToRTR`. It "
"defines, too, higher-level wrappings of the :kl-ref:`SceneGraph` for "
"configuring it as an RTR input, such as :kl-ref:`SceneGraphToRTR`."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:112
msgid ""
"The FabricOGL and OSOGL extensions define low-level wrapping of native "
"OpenGL and OS-specific OpenGL extensions."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:115
msgid ""
"The OGLWrappers extension defines higher-level wrapping of OpenGL object,"
" such as buffers, framebuffer objects. It provides, too, functionality "
"that is more closely related to RTR requirements, such as:"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:119
msgid ""
"a `.glsl` preprocessor that can extract parameter meta-data and provide "
"support for ``#include`` directives"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:122
msgid ""
"versioning of GL wrapped objects, and ability to prepare some data "
"without a GL draw context"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:125
msgid ""
"chaining of :kl-ref:`OGLProgramParamValues`: parameter value sets that "
"can \"inherit\" from parent ones"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:129
msgid "Performance"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:131
msgid ""
"Being a realtime renderer, the RTR tries to deliver good performance "
"while being flexible, which can be challenging. The following practices "
"are followed by the RTR and related extensions to allow for a better "
"performance:"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:135
msgid ""
"Minimize memory allocations and fragmentation: recycle existing allocated"
" data or array items instead of recreating them, regroup structures in "
"contiguous arrays and avoid KL dictionaries in performance sensitive "
"situations (high fragmentation)"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:139
msgid ""
"Batch-process elements as much as possible, and regroup the working data "
"sets in contiguous memory (arrays)"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:142
msgid ""
"Separate drawing from processing tasks, such that the RTR can eventually "
"process the next frame while rendering, and so that processing tasks can "
"be evaluated by multiple threads"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:146
msgid ""
"Use versioning (Versioned interface) and caches at every step to allow "
"for incremental updates, so that a small scene change implies a small "
"rendering data change. This complexifies the implementation of the "
"objects but is essential for having a good performance."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:150
msgid ""
"Minimize thread locking: use spin locks (SimpleLock, LockedInitialize) "
"for situations where locking is exceptional or occurs for a short period "
"of time"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:153
msgid ""
"Avoid interface queries (converting from a type or interface to another "
"type of interface) and avoid setting Object variables (use Ref<Object> "
"when possible to avoid atomic reference count changes)"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:156
msgid ""
"Use `inline` for performance-sensitive small functions, split smaller "
"portions that treat the frequent cases."
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:159
msgid "Table of Contents"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:171
msgid "Indices and Tables"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:173
msgid ":ref:`genindex`"
msgstr ""

#: ../../source/KLExtensionsGuide/RTR2/index.rst:174
msgid ":ref:`search`"
msgstr ""

