#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: 2015-12-07 02:10+0900\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"X-Generator: Poedit 1.8.5\n"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:4
msgid "FabricStatistics Extension"
msgstr "ファブリック統計(Statistics)　エクステンション"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:10
msgid "|FABRIC_PRODUCT_NAME| version |FABRIC_VERSION|"
msgstr ""

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:11
msgid "|FABRIC_COPYRIGHT|"
msgstr ""

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:13
msgid ""
"The ``FabricStatistics`` extension wraps a singleton statistics collector "
"which can efficiently collect and synthesize custom statistics and "
"profiling information. Through a thread-safe singleton, statistic source "
"objects and profiling events can be recorded at any time from KL code."
msgstr ""
"``ファブリック統計`` エクステンションはカスタム統計やプロファイリング情報を"
"効率よく収集し統合できるシングルトン統計コレクターをラップしています。スレッ"
"ドセーフなシングルトンを通して、統計ソースオブジェクトおよびプロファイリング"
"イベントはKLコードからいつでも記録ができます。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:17
msgid ""
"The FabricStatistics extension has been designed for both simplicity of "
"usage and to minimize overhead. In particular, most of the work for "
"analyzing statistics and profiling events is delayed until a final report "
"is requested."
msgstr ""
"ファブリック統計エクステンションは、オーバーヘッドを最小限に抑えることと使用"
"の簡易さが両立するように設計されています。特に、統計分析およびイベントプロ"
"ファイリングのための大半の作業が、最終のレポートが要求されるまで遅延されま"
"す。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:23
msgid "Statistics"
msgstr "統計(Statistics)"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:25
msgid ""
"The FabricStatistics extension can collect custom statistics and "
"information for any registered objects, from any KL source code (extension, "
"operator...). It supports object hierarchies, which simplifies the reports, "
"and allows to sum values through the hierarchy (eg: memory usage)."
msgstr ""
"ファブリック統計エクステンションは任意のKLソースコード(エクステンションやオ"
"ペレーターなど)からカスタム統計や登録済みオブジェクトの情報を収集できます。 "
"それはレポートを単純化するオブジェクト階層をサポートし、階層の値を合計するこ"
"とができます (例：メモリ使用量)。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:28
msgid ""
"Statistics collection for an object is enabled through the implementation "
"of the :kl-ref:`StatisticSource` interface. Through the :kl-ref:"
"`StatisticSource.getStatistics` method, the object can submit any "
"statistics or information that can be useful for further analysis. The "
"implementation of the :kl-ref:`StatisticSource` can be simplified by using "
"the :kl-ref:`StatisticsAutoRegisterMember` helper object, as seen in the "
"example below."
msgstr ""
"オブジェクトの統計収集は :kl-ref:`StatisticSource` インターフェースの実装を"
"通じて有効になります。 :kl-ref:`StatisticSource.getStatistics` メソッドを通"
"じて、オブジェクトは分析の促進に役立つ任意の統計や情報を出力できます。 :kl-"
"ref:`StatisticSource` の実装は、次の例に見られるように :kl-ref:"
"`StatisticsAutoRegisterMember` ヘルパーオブジェクトの使用によって簡略化でき"
"ます。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:33
msgid ""
"In order to be registered by the FabricStatistics extension, objects "
"implementing the :kl-ref:`StatisticSource` interface must call :kl-ref:"
"`RegisterToFabricStatistics` in their constructor(s), and :kl-ref:"
"`UnregisterFromFabricStatistics` in their destructor. Again, this process "
"can be simplified and made more robust by using the :kl-ref:"
"`StatisticsAutoRegisterMember` helper."
msgstr ""
"ファブリック統計エクステンションで登録するためには、 :kl-ref:"
"`StatisticSource` インターフェースを実装するオブジェクトがコンストラクタで :"
"kl-ref:`RegisterToFabricStatistics` を、そしてデストラクタで :kl-ref:"
"`UnregisterFromFabricStatistics` を呼び出す必要があります。このプロセスも :"
"kl-ref:`StatisticsAutoRegisterMember` ヘルパーの使用によってより堅牢性を高"
"め、かつ簡略化ができます。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:37
msgid ""
"Statistic source objects will be recorded only if statistics have been "
"previously enabled by a call to the :kl-ref:`EnableFabricStatistics` "
"function. Statistic source objects that were constructed before a call to :"
"kl-ref:`EnableFabricStatistics` will not be monitored, so it is recommended "
"to enable statistics before the scene gets populated."
msgstr ""
"統計元オブジェクト群は、 :kl-ref:`EnableFabricStatistics` 関数の呼び出しに"
"よって前もって統計が有効にになっている場合にのみ記録されます。 :kl-ref:"
"`EnableFabricStatistics` の呼び出しの前に構成された統計元オブジェクト群は監"
"視されなくなるので、シーンの読み込み前に統計を有効にすることをお勧めします。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:41
msgid ""
"If a :kl-ref:`StatisticSource` has some sub-objects that are themselves a :"
"kl-ref:`StatisticSource` (eg: `PolygonMesh` has a `GeometryAttributes` "
"container), this relationship must be explicitly recorded by calling the :"
"kl-ref:`AddStatisticsChild` function."
msgstr ""
"もし :kl-ref:`StatisticSource` がそれら自身 :kl-ref:`StatisticSource` のサブ"
"オブジェクト群を持っている場合、（例：「ポリゴンメッシュ」は「ジオメトリアト"
"リビュートコンテナ」を持っている）この関係は :kl-ref:`AddStatisticsChild` 関"
"数の呼び出しによって明示的に記録される必要があります。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:46
msgid ""
"Failing to unregister an object in its destructor can lead to a crash, "
"since the FabricStatistics extension only keeps a `Ref<>` (unowned) of the "
"object in order to avoid leaks (else, the object would never destroyed). "
"Again, this can be avoided by using the :kl-ref:"
"`StatisticsAutoRegisterMember` helper."
msgstr ""
"デストラクタでのオブジェクトの登録解除の失敗は、ファブリック統計エクステン"
"ションがリーク(他にもオブジェクトが破棄されない)を回避するためのオブジェクト"
"の `Ref<>` (所有しない)を維持するので、クラッシュの原因となります。またして"
"も、これは :kl-ref:`StatisticsAutoRegisterMember` ヘルパーの使用で回避できま"
"す。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:50
msgid ""
"Statistics returned by an object through the :kl-ref:`StatisticSource."
"getStatistics` method are simple name / value pairs, embedded in a :kl-ref:"
"`StatisticRecord`. Support statistic value types include `String`, `SInt64` "
"and `Float64`. Although returned statistics can be arbitrary (eg: `Image` "
"returning its `width` and `eight``), there are some standard fields:"
msgstr ""
":kl-ref:`StatisticSource.getStatistics` メソッドを経たオブジェクトによって返"
"された統計は :kl-ref:`StatisticRecord` で埋め込まれた単純な名前と値のペアで"
"す。サポートされる統計値の型は`文字列`、`SInt64`と`Float64`が含まれます。と"
"はいえ返される統計値は任意(例：'イメージ'では'幅'と'高さ'で返す)にできます"
"が、それぞれ標準のフィールドがあります。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:54
msgid ""
"\"Name\" (the `Statistic_Name` constant): objects should provide a name, as "
"this is the best way to identify an object in the statistics report."
msgstr ""
"「名前」( `Statistic_Name` 定数): 統計レポート内でオブジェクトを識別する最善"
"の方法として、名前を与えておくべきです。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:56
msgid ""
"\"Category\" (the `Statistic_Category` constant): this allows to regroup "
"objects of different types in the statistics report for more clarity."
msgstr ""
"「カテゴリ」( `Statistic_Category` 定数): より明瞭になるよう統計レポート内の"
"異なる型のオブジェクト群を再グループ化することを可能にします"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:58
msgid ""
"\"Type\" (the `Statistic_Type` constant): the KL type of the source. This "
"one doesn't have to be provided, as it is automatically generated using the "
"``.type()`` KL feature. The statistics report can regroup objects of the "
"same type for more clarity."
msgstr ""
"「タイプ」( `Statistic_Type` 定数): ソースのKL型。 ``.type()`` KL機能を使用"
"して自動的に生成されるので、これは与える必要はありません。統計レポートがより"
"明瞭になるように、同じ型のオブジェクトを再グループ化できます。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:61
msgid ""
"\"Memory\" (the `Statistic_MemoryUsage` constant): the main memory usage "
"for an object. If the object has sub-objects that implement themselves the "
"StatisticSource interface, these should not be included in the \"Memory\", "
"but rather registered as children objects (using the :kl-ref:"
"`AddStatisticsChild` function). By default, the \"Memory\" statistic will "
"get summed through the hierarchy in the final report. Since KL doesn't "
"provide (yet) facilities for retrieving actual memory usage, this has to be "
"estimated manually."
msgstr ""
"「メモリ」( `Statistic_MemoryUsage` 定数): オブジェクトのために使用するメイ"
"ンメモリ。オブジェクトが自身でStatisticSourceインターフェースを実装したサブ"
"オブジェクトを所有する場合、メモリ内に含めるのではなくむしろ( :kl-ref:"
"`AddStatisticsChild` 関数を使用し)子供オブジェクトとして設定するべきです。標"
"準的に、メモリ統計は最終レポート内で階層を加算します。KLで実際のメモリ使用量"
"の情報を引き出すための機能をまだ提供しておらず、手動で見積もる必要がありま"
"す。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:67
msgid ""
"\"GPUMemory\" (the `Statistic_GPUMemoryUsage` constant): similar to \"Memory"
"\" (above), but for the GPU (eg: OpenGL buffer objects)."
msgstr ""
"「GPUメモリ」( `Statistic_GPUMemoryUsage` 定数): メモリ(上記参照)と同じです"
"が、GPUのためのものです。(例えば: OpenGLバッファーオブジェクト)"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:114
msgid ""
"Statistics for all registered objects and their hierarchy can be retrieved "
"by calling functions such as :kl-ref:`GetStatisticStrings` and :kl-ref:"
"`GetStatisticsCSV`. In order to minimize runtime overhead, statistic source "
"objects' :kl-ref:`StatisticSource.getStatistics` methods are only called "
"when the statistic report is built. Information about destroyed objects is "
"not retained."
msgstr ""
"全ての登録済みオブジェクトやそれら階層の統計は :kl-ref:"
"`GetStatisticStrings` や :kl-ref:`GetStatisticsCSV` といった関数を呼び出すこ"
"とで情報を引き出す(検索する)ことができます。ランタイムオーバーヘッドを最小限"
"に抑えるために、統計元オブジェクトの :kl-ref:`StatisticSource."
"getStatistics` メソッドは統計レポートが構築される時に呼び出さるだけです。破"
"棄したオブジェクト群についての情報は保持されません。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:119
msgid ""
"The report can generate the sum of some statistics (eg: \"Memory\"). The "
"list of the statistics to sum through the object hierarchies is provided by "
"the `ColumnsToSum` argument in functions such as :kl-ref:"
"`GetStatisticStrings`."
msgstr ""
"レポートはいくつかの統計の合計を生成できます(例:メモリ)。オブジェクト階層を"
"合計するための統計のリストは、 :kl-ref:`GetStatisticStrings` のような関数の "
"`ColumnsToSum` 引数によって提供されます。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:124
msgid ""
"The :kl-ref:`FabricStatistics_RTValWrapper` object simply wraps the "
"`FabricStatistics` global functions so they can be accessible through "
"`RTVals` (global functions are not accessible because of a limitation)"
msgstr ""
":kl-ref:`FabricStatistics_RTValWrapper` オブジェクトは 'ファブリック統計' の"
"グローバル関数群をシンプルにラップし、それらは `RTVals` を通じてアクセスする"
"ことができます。(グローバル関数は制限のためアクセス不可です)"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:130
msgid "Profiling"
msgstr "プロファイリング"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:132
msgid ""
"The FabricStatistics extension provides some facility for recording custom "
"profiling events. FabricStatistics profile events are mostly useful for "
"tracking specific details, for example breaking operators into multiple "
"steps, identified with custom tags. The FabricStatistics profile events can "
"be nested, and the hierarchy of events will be recorded."
msgstr ""
"ファブリック統計エクステンションは、カスタムプロファイリングイベント群を記録"
"するためのいくつかの機能を提供します。ファブリック統計プロファイルイベント群"
"は、たとえばオペレータをタグで識別された複数のステップに分割するといった特定"
"の詳細についての追跡で役立ちます。ファブリック統計プロファイルイベント群は入"
"れ子にすることができ、イベント群の階層は記録されます。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:137
msgid ""
"Submitted profiling events will only be recorded if profiling is enabled by "
"a call to :kl-ref:`StartFabricProfiling` or :kl-ref:"
"`StartFabricProfilingFrames`."
msgstr ""
"出力済みのプロファイリングイベント群は、プロファイリングが :kl-ref:"
"`StartFabricProfiling` もしくは :kl-ref:`StartFabricProfilingFrames` の呼び"
"出しによって有効にされた場合に記録されるだけです。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:140
msgid ""
"Profiling events need to be bracketed through a call to :kl-ref:"
"`BeginProfilingEvent` and :kl-ref:`EndProfilingEvent`. The `key` returned "
"by :kl-ref:`BeginProfilingEvent` must be passed to the corresponding :kl-"
"ref:`EndProfilingEvent`. When applicable, events can refer a :kl-ref:"
"`StatisticSource` object in order to provide more information. The :kl-ref:"
"`AutoProfilingEvent` struct can simplify profiling events recording since "
"it will automatically call :kl-ref:`EndProfilingEvent` upon destruction."
msgstr ""
"プロファイリングイベントは :kl-ref:`BeginProfilingEvent` と :kl-ref:"
"`EndProfilingEvent` の呼び出しをひとまとめで行う必要があります。 :kl-ref:"
"`BeginProfilingEvent` で返された `key` は、 :kl-ref:`EndProfilingEvent` まで"
"渡す必要があります。このような時には、イベント群はより多くの情報を提供するた"
"めに :kl-ref:`StatisticSource` を参照することができます。 :kl-ref:"
"`AutoProfilingEvent` 定数は破棄する際に :kl-ref:`EndProfilingEvent` を自動で"
"呼び出すので、プロファイリングイベント群の記録を簡略化できます。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:146
msgid ""
"All recorded events from the last profiling session can be retrieved by "
"calling :kl-ref:`GetProfilingEvents` or :kl-ref:`GetProfilingReport`."
msgstr ""
"最後のプロファイリングセッションの全ての記録済みイベント群は、 :kl-ref:"
"`GetProfilingEvents` もしくは :kl-ref:`GetProfilingReport` の呼び出しで回収"
"できます。"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:152
msgid "Table of Contents"
msgstr "目次"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:164
msgid "Indices and Tables"
msgstr "索引と検索"

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:166
msgid ":ref:`genindex`"
msgstr ""

#: ..\..\source\KLExtensionsGuide\FabricStatistics\index.rst:167
msgid ":ref:`search`"
msgstr ""
