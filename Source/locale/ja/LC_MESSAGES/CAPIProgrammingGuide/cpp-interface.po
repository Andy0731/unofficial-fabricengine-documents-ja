#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:7
msgid "The C++ Language Interface"
msgstr ""

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:9
msgid ""
"This chapter describes in detail the general practices that are required of "
"an application that uses CAPI through the C++ language interface.  This "
"chapter is not required reading if you do not plan on using the C++ language"
" interface."
msgstr ""

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:11
msgid ""
"Since C++ provides both object lifecycle management and exception features, "
"there is much less work for a programmer to do when using CAPI's C++ "
"interface."
msgstr ""

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:14
msgid "Namespacing"
msgstr ""

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:16
msgid ""
"All of the C++ interface objects (classes) and functions are namespaced "
"within the C++ namespace ``FabricCore``.  As a programmer, you can choose to"
" use explicit namespacing by prefixing all usage of CAPI objects and "
"functions with ``FabricCore::...``, for instance "
":cpp:class:`FabricCore::DGNode`, or you can choose to omit the prefix "
"(assuming the resulting symbol name does not conflict with other symbols in "
"your program at compile time) by adding"
msgstr ""

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:22
msgid "at the top of each source file that uses the CAPI C++ interface."
msgstr ""

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:25
msgid "Object Lifecycles"
msgstr ""

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:27
msgid ""
"Both reference-counted objects and variants are automatically released when "
"they go out of scope when using the C++ interface to CAPI.  Scoping rules "
"for CAPI C++ objects are the same as for any other C++ object."
msgstr ""

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:30
msgid "Error Handling"
msgstr ""

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:32
msgid ""
"The C++ interface uses standard C++ exception handling for its error "
"handling features.  When using the CAPI C++ interface, any errors that occur"
" are thrown as C++ exceptions of type :cpp:class:`FabricCore::Exception`, "
"and can be caught using a standard ``catch ( FabricCore::Exception e ) { ..."
" }`` statement.  For more information, see :ref:`exceptions`."
msgstr ""

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:35
msgid "Example"
msgstr ""

#: ..\..\source\CAPIProgrammingGuide\cpp-interface.rst:37
msgid ""
"The following example code shows the use of the C++ language interface to "
"CAPI."
msgstr ""
