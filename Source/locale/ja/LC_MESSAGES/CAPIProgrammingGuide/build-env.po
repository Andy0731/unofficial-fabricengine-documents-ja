#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:7
msgid "The CAPI Build Environment"
msgstr "CAPIビルド環境"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:10
msgid "CAPI Prerequisites"
msgstr "CAPIの事前準備"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:12
msgid ""
"In order to use CAPI in your applications, you need a basic build "
"environment.  This build environment is operating system-dependent as "
"follows:"
msgstr "アプリケーションでCAPIを使用するため、まずは基本的なビルド環境が必要です。各OSによって変わります:"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:15
msgid "Windows"
msgstr "Windows"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:15
msgid ""
"You must have Visual Studio 2010 or later installed.  The \"Express\" "
"version will work for building 32-bit CAPI applications and plugins, but the"
" \"Professional\" version is required to build for 64-bit.  It may be "
"possible to make CAPI work with non-Visual Studio compilers for Windows but "
"it is not supported."
msgstr ""
"Visual Studio 2010 以降を必要とします。\"Express\" だと 32bit CAPIアプリ, プラグインしかビルドできませんが、 "
"\"Professional\" バージョンであれば 64-bitビルド に使えます。（訳注：\"Express\"であっても WinSDK8.1A "
"を入れれば64bitビルド可能ですが煩雑な設定が必要になります）非VSコンパイラであっても CAPI のビルドは可能ですがサポートいたしません。"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:18
msgid "Linux"
msgstr "Linux"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:18
msgid ""
"You must have a C and/or C++ compiler installed.  CAPI is built and tested "
"with a gcc version 4.x compiler but should work with any reasonably-modern "
"version of gcc, and may also work with other C and C++ compilers as well, "
"but this is not supported."
msgstr ""
"C and/or C++ コンパイラのインストールが必要です。CAPI は gcc version "
"4.xコンパイラによりビルドしています。現代的なバージョンの gcc, あるいは他の "
"C,C++コンパイラであっても機能するはずです。ただしサポートいたしません。"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:21
msgid "Mac OS X"
msgstr "Mac OS X"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:21
msgid "You must have installed Xcode 4.2 or later."
msgstr "Xcode 4.2 以降のインストールが必要です。"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:23
msgid ""
"In addition, you must have any libraries that CAPI is dependent on installed"
" on your system; however, these libraries are automatically satisfied as "
"part of the Fabric Core installer process."
msgstr ""
"さらに、CAPI が依存するライブラリがシステムにインストールされている必要があります。ただしこの条件は Fabric Core "
"のインストールプロセスの一部として自動的に満たされます。"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:25
msgid ""
"Finally, to build the CAPI samples without modification, you will need to "
"have installed version 2.x.x of the :dfn:`SCons` build tool.  Scons "
"distributions can be found at http://www.scons.org/; it can also be "
"installed using your usual package management system for Linux or through "
"MacPorts under Mac OS X (see http://www.macports.org/)."
msgstr ""
"最後に、CAPIサンプルを（変更なしに）ビルドするには、ビルドツールの :dfn:`SCons` バージョン2.x.x が必要です。Scons "
"配布ファイルは http://www.scons.org/ にあります。OSに存在する一般的なパッケージマネージャを使用してもよいでしょう。Linux "
"であれば apt や yum, Mac OS X であればMacPorts  (see http://www.macports.org/)"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:28
msgid "CAPI Files and the :envvar:`FABRIC_DIR` Environment Variable"
msgstr "CAPIファイル と 環境変数 :envvar:`FABRIC_DIR`"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:30
msgid ""
"CAPI is installed on your system as part of the Fabric Engine install.  Your"
" scripts should set the environment variable :envvar:`FABRIC_DIR` to the "
"directory in which Fabric Engine is installed on your system.  During the "
"install process, the CAPI files are copied under subdirectories of "
":file:`$FABRIC_DIR` (the value of the :envvar:`FABRIC_DIR` environment "
"variable) as follows:"
msgstr ""
"CAPI は Fabric Engine と一緒にシステムにインストールされます。スクリプト中では、環境変数 :envvar:`FABRIC_DIR` "
"をシステム上のFabric Engine をインストールしたディレクトリに設定します。インストール処理において、CAPI ファイル群は "
":file:`$FABRIC_DIR` (環境変数 :envvar:`FABRIC_DIR` の値)のサブフォルダにコピーされます。具体的には以下:"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:32
msgid ""
"The CAPI header files are installed under the :file:`$FABRIC_DIR/include` "
"subdirectory"
msgstr "CAPI header ファイルは :file:`$FABRIC_DIR/include` サブフォルダ以下"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:34
msgid ""
"The CAPI shared library is stored under the :file:`$FABRIC_DIR/lib` "
"subdirectory"
msgstr "CAPI sharedライブラリ は :file:`$FABRIC_DIR/lib` サブフォルダ以下"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:36
msgid ""
"The CAPI sample source code is installed under the "
":file:`$FABRIC_DIR/CAPI/Samples` subdirectory"
msgstr "CAPI のサンプルソースファイルは :file:`$FABRIC_DIR/CAPI/Samples` サブフォルダ以下"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:39
msgid "CAPI Library Linking"
msgstr "CAPI ライブラリリンク"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:41
msgid ""
"When compiling against the CAPI you must define one of `FEC_STATIC` or "
"`FEC_SHARED` depending on the type of CAPI library you will be using. If you"
" will be linking statically with the CAPI library (using a .a file on "
"Linux/OSX or a static .lib file on Windows) you must set `FEC_STATIC`. If "
"you will be linking against a dynamic library (a .so file on Linux, .dylib "
"on OSX or .lib + .dll on Windows) then you will defined FEC_SHARED."
msgstr ""
"CAPI をコンパイルする際、CAPIライブラリの種類に応じ、 `FEC_STATIC` or `FEC_SHARED` "
"どちらを使用するか定義します。CAPIライブラリと静的リンクするのであれば（Linux/OSX であれば .a ファイル ／ Windowsであれば "
"static .lib） `FEC_STATIC` と設定します。一方動的ライブラリとして(Linux であれば .so ファイル ／ OSXであれば "
".dylib ／ Windowsであれば .lib + .dll） `FEC_SHARED` と定義しましょう。"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:43
msgid ""
"Use of these defines allows for optimizing the API calls on Windows using "
"dllimport and is maintained across Linux and OSX for consistency and future "
"compatibility."
msgstr ""
"これらの定義を使用すると、 Windowsであれば dllimport によりAPIコールが最適化され、LinuxやOSXであれば一貫性と将来に渡る互換性を"
"保つことができます。"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:46
msgid "Building the Samples"
msgstr "サンプルのビルド"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:48
msgid ""
"CAPI is provided with sample code that you can build and run on your system."
"  They can be found under the :file:`$FABRIC_DIR/CAPI/Samples` directory and"
" currently consist of the following:"
msgstr ""
"CAPI にはサンプルコードが付属しています。各OSでビルドと実行可能です。 :file:`$FABRIC_DIR/CAPI/Samples` "
"ディレクトリにあり、現時点での内容は以下となっています:"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:52
msgid ":file:`C/HelloWorld/...`"
msgstr ":file:`C/HelloWorld/...`"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:52
msgid "The C interface version of the \"HelloWorld\" application"
msgstr "Cインタフェースを使用した \"HelloWorld\" アプリ"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:55
msgid ":file:`CPP/HelloWorld/...`"
msgstr ":file:`CPP/HelloWorld/...`"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:55
msgid "The C++ interface version of the \"HelloWorld\" application"
msgstr "C++ インタフェースを使用した \"HelloWorld\" アプリ"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:57
msgid ""
"It is recommended to make a copy of the desired source code directory into "
"another location before building a sample rather than building it in place."
msgstr ""
"サンプルをビルドする前に、まずソースコードを別の場所へとコピーしておくことをお薦めします（サンプルディレクトリでそのままビルドするのではなく）。"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:59
msgid ""
"To build a sample, you can simply run the :command:`scons` command from the "
"command line for you platform within the copy of the sample directory.  It "
"will produce an executable that can be run from the sample build directory."
msgstr ""
"サンプルのビルドには、プラットフォームに応じたコマンドラインを開き、サンプルのコピーのあるディレクトリへ移動し :command:`scons` "
"とコマンドを実行します。実行ファイルを作ります。サンプルのビルドディレクトリから実行可能です。"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:62
msgid "Using CAPI With Other Build Systems and Projects"
msgstr "CAPI を他のビルドシステムやプロジェクトから使用するには"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:64
msgid ""
"In order to integrate the use of CAPI with another build system or project, "
"you need to set a few options for the C/C++ compiler and linker.  Rather "
"than give operating system- and compiler-specific instructions, we provide "
"high level steps that are will need to be done for every C/C++ project or "
"build system in which you wish to use CAPI.  They are:"
msgstr ""
"他のビルドシステムやプロジェクトと、CAPIの使用を統合するには、C/C++ コンパイラとリンカに幾つかオプションを設定する必要があります。OSや、コンパイ"
"ラに依存する工程に従うのではなく、Fabricではより高次のステップを提供しています。CAPIを使用するどの C/C++ "
"プロジェクトやビルドシステムにも適用できます。"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:66
msgid ""
"Add the directory :file:`$FABRIC_DIR/include` to the include (header) search"
" path."
msgstr ":file:`$FABRIC_DIR/include` を include (header) 検索パスに追加する"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:68
msgid ""
"Add the CAPI library (.lib/.so), located in :file:`$FABRIC_DIR/lib`.  The "
"name of the shared library is operating system- and CAPI version-specific, "
"but will generally contain the text :samp:`FabricCore-{X}.{Y}` where "
":samp:`{X}` and :samp:`{Y}` are the major and minor versions of the Fabric "
"Core that are installed (eg. ``1.5``)."
msgstr ""
":file:`$FABRIC_DIR/lib` にある CAPI ライブラリ (.lib/.so) を追加する。共有ライブラリの名前はOSと "
"CAPIバージョン により変わりますが、:samp:`FabricCore-{X}.{Y}` :samp:`{X}` , :samp:`{Y}` は "
"インストールした Fabric Core のメジャー、マイナーバージョン(eg. ``1.5``)となります。"

#: ..\..\source\CAPIProgrammingGuide\build-env.rst:70
msgid ""
"Be sure to include the CAPI header at the top of any C/C++ source files that"
" use CAPI as follows:"
msgstr "CAPI ヘッダを C/C++ ソース・ファイルの最上部で確実にインクルードします。以下のようにします:"
