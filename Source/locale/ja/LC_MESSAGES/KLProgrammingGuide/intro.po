#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\KLProgrammingGuide\intro.rst:2
msgid "Introduction"
msgstr "はじめに"

#: ..\..\source\KLProgrammingGuide\intro.rst:4
msgid ""
"KL (pronounced \"kale\") is the programming language used for "
"|FABRIC_PRODUCT_NAME| operators.  KL stands for \"kernel language\"; in this"
" context, *kernel* refers to the concept of a computational kernel as used "
"in multithreaded programming."
msgstr ""
"KL（ケーゥと発音します）とは、 |FABRIC_PRODUCT_NAME| オペレータに使用されるプログラム言語です。KLは「カーネル言語」"
"の略、この文脈では、 *kernel* とはマルチスレッドプログラミングで使用されるような演算カーネルの概念を指します。"

#: ..\..\source\KLProgrammingGuide\intro.rst:6
msgid "KL was designed with the following goals:"
msgstr "KLは以下のゴールを目指し設計されています："

#: ..\..\source\KLProgrammingGuide\intro.rst:8
msgid ""
"KL is designed to run performance-critical sections of dynamic-language "
"programs.  As such, KL is designed so that KL programs run as quickly as "
"possible on modern hardware."
msgstr ""
"KLは動的言語プログラムではパフォーマンスクリティカルな分野に於いて実行される用設計されています。KLプログラムはモダンな機器上で可能な限り高速に実行される"
"よう設計されています。"

#: ..\..\source\KLProgrammingGuide\intro.rst:10
msgid ""
"KL should be easy to learn for someone who is already familiar with "
"programming in Python, JavaScript and other scripting languages."
msgstr "KLは、Python や JavaScript のようなスクリプト言語にすでに馴染みがあればすぐに習得可能です。"

#: ..\..\source\KLProgrammingGuide\intro.rst:12
msgid ""
"It must be possible to compile most KL programs to run on different "
"architectures and kinds of hardware, specifically CPUs and GPUs."
msgstr "KLプログラムは異なるアーキテクチャ、機器、CPU、GPU上で問題なく動作し、コンパイル可能です。"

#: ..\..\source\KLProgrammingGuide\intro.rst:14
msgid ""
"KL is a language with a syntax very similar to JavaScript but that is "
"*procedural*, *strongly-typed* and with *low-level data layouts*.  Being "
"**procedural** means that, unlike JavaScript, functions (or, rather, "
"closures) are not first-class objects that can be passed around in the "
"language; instead, functions are always globally declared.  Being "
"**strongly-typed** means that, in a KL program, the types of all variables "
"and function parameters are known at compile type, unlike JavaScript where "
"types are only known at runtime.  Having **low-level data layouts** means "
"that the size of data and the way that it is laid out in memory is "
"guaranteed and controllable by the programmer."
msgstr ""
"KLは Javascript に非常に近い構文を持つ言語ですが、*プロシージャル*, *強い型づけ* であり *low-level data "
"layouts* と持つという特徴を持ちます。**プロシージャル** とは、 Javascript "
"と異なり、関数（もしくはクロージャ）が言語中受け渡し自由なファーストクラスオブジェクト（first-class "
"objects）では「なく」、かわりに関数は常にグローバル宣言されます。 **強い型づけ** "
"とは、KLプログラム中、すべての変数や関数のパラメータの型はコンパイル時に解決されることを意味します。実行時に解決されるような JavaScript "
"などとは異なります。 **low-level data layouts** を持つということは、データのサイズや、メモリでのそれらの配置に関して、プログラマ"
"ーが制御できるということを保証します。"

#: ..\..\source\KLProgrammingGuide\intro.rst:19
msgid "Running the Examples"
msgstr "サンプルの実行"

#: ..\..\source\KLProgrammingGuide\intro.rst:21
msgid ""
"This guide is full of KL example code.  We encourage you to not only read "
"the examples and their output, but to try making changes to them based on "
"what you're learning and see how it affects the results."
msgstr ""
"このガイドはKLサンプルコードが沢山載っています。サンプルと実行結果例を読むだけではなく、学んだものを基にこれらサンプルに手を加え、どのように結果が変化する"
"か実際に試すことをお勧めします。"

#: ..\..\source\KLProgrammingGuide\intro.rst:23
msgid ""
"In order to run KL code in isolation (ie. outside of |FABRIC_PRODUCT_NAME|) "
"we have created the *KL tool*.  The KL tool has been used to generate all of"
" the output you will find in this guide.  It is installed as part of the "
"|FABRIC_PRODUCT_NAME| installer, available at http://dist.fabric-"
"engine.com/|FABRIC_PRODUCT_NAME_CAMEL_CASE|/latest/.  As part of the install"
" process, the :envvar:`FABRIC_DIR` environment variable will be set, and the"
" KL tool will be installed in the directory :file:`$FABRIC_DIR/bin`.  Once "
"the KL tool is installed, you can copy the source code for an example into a"
" text file and run :command:`kl filename.kl` from a command line to "
"reproduce the results."
msgstr ""
"KLコードを単独で実行(すなわち |FABRIC_PRODUCT_NAME| 外で)するため、 *KL tool* があります。KL tool "
"はこのガイドで目にする全ての出力結果の生成に使用されています。 |FABRIC_PRODUCT_NAME| "
"インストーラの一部として既にインストールされています。（インストーラは http://dist.fabric-engine.com/|FABRIC_PROD"
"UCT_NAME_CAMEL_CASE|/latest/ こちらから）インストールプロセスの一環で、環境変数 :envvar:`FABRIC_DIR` "
"を設定されたはずです。そのため KL tool は :file:`$FABRIC_DIR/bin` に存在します。KL tool "
"をインストールした後、サンプルコードをテキストファイルに保存し、コマンドラインから :command:`kl filename.kl` "
"として実行し、結果を得ます。"

#: ..\..\source\KLProgrammingGuide\intro.rst:25
msgid ""
"The KL tool supports a wide variety of options that can aid in developing "
"|FABRIC_PRODUCT_NAME| applications.  Run :command:`kl --help` for "
"information on the available options.  In particular, :command:`kl "
"--loadexts` is very useful for debugging custom |FABRIC_PRODUCT_NAME| "
"extensions."
msgstr ""
"KL tool には |FABRIC_PRODUCT_NAME| アプリケーションの開発に役立つ様々なオプションがあります。 :command:`kl "
"--help` を実行し、利用可能なオプションと詳細を表示します。 :command:`kl --loadexts` はカスタム "
"|FABRIC_PRODUCT_NAME| エクステンションのデバッグにとても役立つでしょう。"

#: ..\..\source\KLProgrammingGuide\intro.rst:28
msgid "Hello World in KL"
msgstr "KL でHello World"

#: ..\..\source\KLProgrammingGuide\intro.rst:30
msgid ""
"Before diving in to the details of the language, we will present some simple"
" examples.  We don't expect you to understand all the details of the "
"examples, but hopefully they will give you a basic idea of what KL programs "
"look like as well as some of what is possible with KL."
msgstr ""
"言語の詳細に飛び込むまえに、まずは簡単なサンプルをいくつかお見せします。サンプルのすべての詳細について完璧に理解する必要はありません。KLプログラムがどのよ"
"うな感じなのか、どんなことができるのかについての基本的概念の把握に役立つと思います。"

#: ..\..\source\KLProgrammingGuide\intro.rst:32
msgid ""
"Traditionally, the first program you see in a language is one that says "
"hello.  In KL, the \"Hello, world!\" program is simple:"
msgstr "伝統に則り、ある言語原初のプログラムといえば hello ですね。KLでは \"Hello, world!\" プログラムは単純です："

#: ..\..\source\KLProgrammingGuide\intro.rst:40
msgid "Running this program through the KL tool, the output is \"Hello, world!\"."
msgstr "このプログラムを KL tool から実行すると、 \"Hello, world!\" と出力されます。"

#: ..\..\source\KLProgrammingGuide\intro.rst:42
msgid ""
"There's not much to learn from this program, but it does introduce a few "
"concepts:"
msgstr "ここではこれ以上のことはあまりありません。ただいくつかのコンセプトがわかりますね。"

#: ..\..\source\KLProgrammingGuide\intro.rst:44
msgid ""
"The ``entry`` operator is what is run by the KL tool.  KL distinguishes "
"places in the program that can be called from the outside world; in this "
"case, the outside world is the KL tool itself.  We discuss more about "
"operators in the section :ref:`operators`"
msgstr ""
"``entry`` オペレータこそが、KL tool から実行されるものです。KLは呼ばれたプログラムと呼んだ外の世界とをの場を分かちます。この場合、外の世"
"界とは KL tool そのものを指します。 :ref:`operators` にオペレータについてのより深い論があります。"

#: ..\..\source\KLProgrammingGuide\intro.rst:46
msgid ""
"The ``report`` function sends some text to wherever messages go.  In the "
"case of the KL tool, messages go to standard output; for console "
"applications (in Node.js or Python for example), messages go to standard "
"error."
msgstr ""
"``report`` 関数はテキストをどこへでも送信します。この場合 KL toolからの送信先は標準出力、コンソールアプリケーション（Node.js や "
"Pythonなど）では標準エラーです。"

#: ..\..\source\KLProgrammingGuide\intro.rst:48
msgid ""
"The text ``\"Hello, world!\"`` is a string constant.  String constants in KL"
" follow almost exactly the same syntax as JavaScript."
msgstr "``\"Hello, world!\"`` は文字列定数です。KLでの文字列定数は、JavaScriptでのシンタックスと同一です。"

#: ..\..\source\KLProgrammingGuide\intro.rst:51
msgid "Fibonacci Sequence in KL"
msgstr "KL でフィボナッチ数列"

#: ..\..\source\KLProgrammingGuide\intro.rst:53
msgid ""
"Next, we present a somewhat more sophisticated example that computes the "
"first few terms of the Fibonacci sequence.  The Fibonacci sequence is the "
"number sequence whose first two terms are 1 and 1, and whose further terms "
"are the sum of the previous two in the sequence, ie. 2, 3, 5, 8, and so on."
"  There are several ways of computing the Fibonacci sequence in a "
"programming language but we choose the naive, recursive way in order to "
"illustrate some more language features of KL."
msgstr ""
"つぎに、洗練された例としてフィボナッチ数列の最初の方の項の計算をお見せします。フィボナッチ数列とは、最初の二項は0,1と定義され、以後どの項もその前の2つの"
"項の和となる（すなわち 1, 2, 3, 5, 8 と続く）数列です。フィボナッチ数列のプログラミング言語での演算には幾通りもありますが、ここではKLの言語"
"機能の解説のため、素朴な再帰を使います。"

#: ..\..\source\KLProgrammingGuide\intro.rst:55
msgid "The source code for the Fibonacci sequence generator in KL is:"
msgstr "KLでフィボナッチ数列を生成するソースコード："

#: ..\..\source\KLProgrammingGuide\intro.rst:75
msgid ""
"The Fibonacci example highlights a few simple features of KL, including:"
msgstr "この例で示される、KLの簡単な機能："

#: ..\..\source\KLProgrammingGuide\intro.rst:77
msgid "Function and parameter declaration"
msgstr "関数とパラメータの宣言"

#: ..\..\source\KLProgrammingGuide\intro.rst:78
msgid "Recursion"
msgstr "再帰"

#: ..\..\source\KLProgrammingGuide\intro.rst:79
msgid "Conditional statements"
msgstr "条件文"

#: ..\..\source\KLProgrammingGuide\intro.rst:80
msgid "Loops"
msgstr "ループ"

#: ..\..\source\KLProgrammingGuide\intro.rst:81
msgid "Comments"
msgstr "コメント"

#: ..\..\source\KLProgrammingGuide\intro.rst:84
msgid "Mandelbrot Set in KL"
msgstr "KL でマンデルブロ集合"

#: ..\..\source\KLProgrammingGuide\intro.rst:86
msgid ""
"Finally, we present an example of a KL program that generates the Mandelbrot"
" set and outputs it visually as ASCII art.  The Mandelbrot set is a "
"mathematical set defined by complex recursive functions, but that it best "
"known because the patterns it contains are visually stunning.  Refer to the "
"Wikipedia entry on the Mandelbrot set at "
"http://en.wikipedia.org/wiki/Mandelbrot_set for more information."
msgstr ""
"最後に、KLプログラムでマンデルブロ集合を生成し、結果をアスキーアートに出力してみます。マンデルブロ集合とは、複雑な再帰関数により定義された数学的な集合です"
"。視覚的にとても見事なパターンを含むことでよく知られています。詳細は Wikipedia の記事 "
"http://en.wikipedia.org/wiki/Mandelbrot_set を参照してください。"

#: ..\..\source\KLProgrammingGuide\intro.rst:88
msgid ""
"KL includes very powerful features for extending the language for "
"computational problems such as that of computing the values of the "
"Mandelbrot set, as seen in the source code below:"
msgstr "KLには、マンデルブロ集合の演算などの計算問題のため言語自体を拡張するような、とても強力な機能が備わっています。以下のコードに現れています。"

#: ..\..\source\KLProgrammingGuide\intro.rst:148
msgid ""
"The Mandelbrot set example highlights a few of the more sophisticated "
"features of KL, including:"
msgstr "マンデルブロ集合の例で使用される、より洗練されたKLの機能："

#: ..\..\source\KLProgrammingGuide\intro.rst:150
msgid "User-defined types"
msgstr "型のユーザ定義"

#: ..\..\source\KLProgrammingGuide\intro.rst:151
msgid "Constructors"
msgstr "コンストラクタ"

#: ..\..\source\KLProgrammingGuide\intro.rst:152
msgid "Operator overloads"
msgstr "演算子オーバーロード"

#: ..\..\source\KLProgrammingGuide\intro.rst:153
msgid "Methods"
msgstr "メソッド"

#: ..\..\source\KLProgrammingGuide\intro.rst:154
msgid "Bitwise operators"
msgstr "ビット演算子"

#: ..\..\source\KLProgrammingGuide\intro.rst:155
msgid "Variable-length arrays"
msgstr "可変長配列"

#: ..\..\source\KLProgrammingGuide\intro.rst:158
msgid "How This Guide is Organized"
msgstr "このガイドの読み方"

#: ..\..\source\KLProgrammingGuide\intro.rst:160
msgid ""
"Unlike other languages, KL is a language designed to add performance-"
"critical sections to programs written in dynamic languages.  As such, this "
"guide assumes that you are already familiar with the basic concepts of "
"modern programming languages, including types, expressions, statements (eg. "
"conditional statements, loop statements, return statements) and functions."
msgstr ""
"他の言語と違い、KLは動的言語で書かれた言語にパフォーマンスクリティカルなセクションを追加するために設計された言語です。そのためこのガイドでは、すでにモダー"
"ンなプログラム言語の基礎概念 ―たとえば型（type）、式(expression)、文(statement)"
"、条件文、ループ文、return文、関数など―について、一定レベルの理解を前提とし記述されています。"

#: ..\..\source\KLProgrammingGuide\intro.rst:162
msgid ""
"Since it's difficult to provide meaningful examples in a computer language "
"without using many concepts of the language, we will often use or even refer"
" to concepts that aren't discussed until later in the guide.  We leave it up"
" to you to decide whether to jump ahead or to just keep reading and see "
"where things go."
msgstr ""
"その言語にもつ概念、コンセプトを使用せず、コンピュータ言語での意味のあるサンプルを提供するのは難しいので、これ以降のガイドでは、それまでに説明していない概念"
"を参照することがあります。先まで読み飛ばすか、そのまま読み進めるか自由です。"

#: ..\..\source\KLProgrammingGuide\intro.rst:164
msgid "The remainder of the guide is laid out as follows:"
msgstr "以降のガイドのレイアウト："

#: ..\..\source\KLProgrammingGuide\intro.rst:166
msgid ""
":ref:`syntax` describes the syntax of KL.  KL has a syntax very similar to "
"JavaScript (like JavaScript, it is a C-like language) so this syntax will be"
" familiar to many programmers.  If you are already familiar with the syntax "
"of JavaScript or C, we recommend that you skip this chapter and move on to "
"the next; you can always come back to it later for reference."
msgstr ""
":ref:`syntax` ではKLの文法について解説します。KL は JavaScript によく似たシンタックスをもちます(JavaScript同様, "
"C-like 言語ですね) 。このため多くのプログラマに取って馴染みのある文法でしょう。もし JavaScript や C言語 "
"が得意であれば、この節はスキップし先に進むと良いでしょう。必要になったらいつでも戻って参照できます。"

#: ..\..\source\KLProgrammingGuide\intro.rst:168
msgid ""
":ref:`KLPG.types` introduces the type system of KL.  KL comes with a rich "
"set of base types that includes integers, floating-point numbers, strings "
"and booleans, as well as derived types including structures, arrays and "
"dictionaries."
msgstr ""
":ref:`KLPG.types` ではKLでの型システムについて解説します。KLには基本的な型が豊富に付属します。例えば "
"整数、浮動小数点数、文字列、真偽、さらには構造体、配列、辞書などの派生型を含みます。"

#: ..\..\source\KLProgrammingGuide\intro.rst:170
msgid ""
":ref:`globals` describes how functions and other global declarations are "
"made in KL.  KL includes support for basic functions (also referred to as "
"procedures in other languages), but also support more complex function "
"concepts such as prototypes, methods and overloaded operators.  It also "
"supports global constants, as well as a facility to import functionality "
"from external modules."
msgstr ""
":ref:`globals` では関数や、他のグローバル宣言について解説します。KLは基本的な関数 ―他の言語ではプロシージャと呼ばれることもある "
"をサポートします。さらに、より複雑な関数にまつわる概念、たとえば、関数プロトタイプ、メソッド、演算子オーバーロードをもサポートします。また、グローバル定数や"
"、外部モジュールの機能のインポートもサポートします。"

#: ..\..\source\KLProgrammingGuide\intro.rst:172
msgid ""
":ref:`ops-exprs` describes the set of operators supported by KL and the "
"different kinds of expressions that can be formed using these operators.  It"
" also discusses the rules that govern scoping for variables and other "
"symbols."
msgstr ""
":ref:`ops-exprs` ではKLでサポートされるいくつかのペレータについて解説します。これらのオペレータを使用した式（expression）"
"の幾つかの変奏についても解説します。また、変数とその他シンボルのスコープの管理規則についても説明します。"

#: ..\..\source\KLProgrammingGuide\intro.rst:174
msgid ""
":ref:`statements` describes the different statements that are available for "
"function bodies in KL."
msgstr ":ref:`statements` ではKL中の関数本体で使用可能な文について解説します。"
