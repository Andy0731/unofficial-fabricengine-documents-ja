#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\KLProgrammingGuide\syntax.rst:4
msgid "KL Syntax"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:6
msgid ""
"When KL was developed it was designed to have a syntax as close as possible "
"to JavaScript, which itself is what is referred to as a *C-like language* "
"(as far as syntax is concerned).  This chapter goes into the details of KL "
"syntax, and can act as a reference for you if you are not familiar with "
"C-like languages.  On the other hand, if you are already familiar with the "
"syntax of JavaScript and/or C, we recommend that you skip this chapter and "
"move on to the next."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:8
msgid "Some of the key characteristics of C-like languages are:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:10
msgid "Programs are plain, human-readable text files."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:12
msgid ""
"A program is a sequence of :index:`tokens <single: token>`.  There are four "
"major types of tokens: keywords, identifiers, symbols and constants."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:14
msgid ""
"Tokens may be separated by arbitrary whitespace and **must** be separated by"
" whitespace in the case that it would make two adjacent tokens appear to be "
"a single, different token.  By whitespace, we mean spaces (ASCII 32), "
"newlines (ASCII 10), tabs (ASCII 9), carriage returns (ASCII 13) and "
"vertical tabs (ASCII 11)."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:16
msgid ""
"Programs can contain comments anywhere and comments are treated like "
"whitespace when the program is processed by the computer.  There are two "
"types of comments: block comments, which begin with ``/*`` and end with "
"``*/``, and line comments, which begin with ``//`` and continue to the next "
"newline (ASCII 10)."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:18
msgid "Blocks are delimited by ``{`` and ``}``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:20
msgid "Statements are terminated with ``;``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:22
msgid "We delve into some more details of the KL syntax below."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:32
msgid "Encoding"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:34
msgid ""
"Although KL programs are plain, human-readable text files, KL does specify "
"an encoding for the text files: UTF-8.  The KL compiler assumes that all KL "
"source code is encoded as UTF-8 without any encoding marks.  KL programs "
"which contain invalid UTF-8 sequences cannot be compiled and will result in "
"syntax errors."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:36
msgid ""
"If you don't understand exactly what this means, don't worry: plain 7-bit "
"ASCII text files, such as used for C source code (and often for JavaScript "
"source code) are by default UTF-8 encoded.  The only thing to keep in mind "
"is that text files saved on Windows in \"Unicode format\" (which technically"
" means they are encoded as UCS-2) cannot be read by the KL compiler.  If you"
" want to insert foreign language characters into a KL source file you must "
"use an editor that can write UTF-8 files."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:38
msgid ""
"The benefit of specifying an encoding is that high-bit characters, such as "
"foreign language characters, can be inserted directly into string constants "
"in KL source files."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:44
msgid "Line Continuations"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:46
msgid ""
"Like C, any line of a KL program that ends with a ``\\`` (backslash) "
"character causes the line to be joined with the next line.  This is useful "
"for breaking long lines into multiple lines when a single token needs to be "
"split; usually this token would be a long string."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:48
msgid "This example shows the use of line continuations in a KL source file:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:65
msgid "Comments"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:67
msgid ""
"KL supports the same two types of comments as C and JavaScript: block "
"comments and line comments."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:73
msgid "Block Comments"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:75
msgid ""
"A block comment in KL is an arbitrary sequence of characters that begins "
"with the characters ``/*`` and ends with the characters ``*/``.  Like C, KL "
"ends a block comment as soon as it encounters the first sequence ``*/``.  "
"Also like C, KL does not recognize nested comments."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:77
msgid "The following example illustrates acceptable block comments in KL:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:98
msgid "The following example unacceptable (erroneous) block comments in KL:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:118
msgid ""
"Be careful with block comments; if either of the errors of the type given "
"above occur in your program it can be very difficult to figure out what has "
"gone wrong; the syntax errors you are given will seem to have nothing to do "
"with your program.  For this reason, we recommend that you use line "
"comments, which are described next."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:124
msgid "Line Comments"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:126
msgid ""
"A line comment in KL begins with the character sequence ``//`` and continues"
" until the end of the line (ASCII character 10).  Unlike block comments, "
"there are no \"gotchas\" with line comments: they work exactly as expected."
"  However, they can't be used to comment out sections of code in the middle "
"of a line."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:128
msgid "The following example illustrates the use of line comments in KL:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:149
msgid "Tokens"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:151
msgid ""
"A KL program is *parsed* as a sequence of tokens.  A token is a sequence of "
"characters that begins with something other than whitespace and is not a "
"comment.  There are four categories of tokens in KL: keywords, identifiers, "
"symbols, and constants."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:157
msgid "Keywords"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:159
msgid "The following is the list of all the keywords in KL:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:164
msgid "``alias``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:165
msgid "``break``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:166
msgid "``case``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:167
msgid "``const``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:168
msgid "``continue``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:169
msgid "``default``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:170
msgid "``do``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:171
msgid "``else``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:172
msgid "``false``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:173
msgid "``FILE``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:174
msgid "``for``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:175
msgid "``FUNC``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:176
msgid "``function``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:177
msgid "``if``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:178
msgid "``in``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:179
msgid "``inline``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:180
msgid "``io``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:181
msgid "``LINE``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:182
msgid "``object``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:183
msgid "``operator``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:184
msgid "``require``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:185
msgid "``return``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:186
msgid "``struct``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:187
msgid "``switch``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:188
msgid "``true``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:189
msgid "``var``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:190
msgid "``while``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:192
msgid ""
"Keywords cannot be used as identifiers, ie. cannot be used for variable, "
"parameter, function, constant or type names."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:198
msgid "Identifiers"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:200
msgid ":dfn:`Identifiers` are a sequence of one or more characters that:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:202
msgid "begin with any of the characters ``a...z``, ``A...Z`` or ``_``; and"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:203
msgid ""
"are followed by zero or more of the characters ``a...z``, ``A...Z``, "
"``0...9`` or ``_``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:205
msgid ""
"Identifiers are used in KL for variable names, parameter names, function "
"names, constant names, method names and type names."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:207
msgid ""
"The built-in base types in KL (eg. ``Boolean``, ``String``, ``Float32``) are"
" not keywords but rather identifiers.  This is a technical detail that is "
"important in the design of the language grammar but doesn't make much "
"difference in practice; it simply changes certain syntax errors into "
"semantic errors."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:209
msgid "Some examples of valid identifiers in KL:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:211
msgid "``foo``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:212
msgid "``someVariable``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:213
msgid "``MyType``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:214
msgid "``MyTypeVersion2``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:215
msgid "``variable_with_underscores``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:216
msgid "``piBy2``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:217
msgid "``_``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:219
msgid "Some examples of invalid identifiers:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:221
msgid "``2by4``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:222
msgid "``my%Share``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:228
msgid "Symbols"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:230
msgid ""
"A small set of non-alphanumeric, non-underscore characters or short "
"sequences of such characters are the :dfn:`symbols` in KL.  They are "
"specifically:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:235
msgid "``=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:236
msgid "``==``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:237
msgid "``===``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:238
msgid "``+``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:239
msgid "``+=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:240
msgid "``++``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:241
msgid "``-``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:242
msgid "``-=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:243
msgid "``--``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:244
msgid "``*``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:245
msgid "``*=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:246
msgid "``/``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:247
msgid "``/=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:248
msgid "``%``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:249
msgid "``%=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:250
msgid "``^``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:251
msgid "``^=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:252
msgid "``^^``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:253
msgid "``&``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:254
msgid "``&=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:255
msgid "``&&``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:256
msgid "``|``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:257
msgid "``|=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:258
msgid "``||``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:259
msgid "``[``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:260
msgid "``[]``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:261
msgid "``]``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:262
msgid "``(``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:263
msgid "``)``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:264
msgid "``{``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:265
msgid "``}``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:266
#: ..\..\source\KLProgrammingGuide\syntax.rst:285
msgid "``;``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:267
msgid "``.``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:268
msgid "``<``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:269
msgid "``<=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:270
msgid "``<<``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:271
msgid "``<<=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:272
msgid "``<<<``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:273
msgid "``<>``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:274
msgid "``>``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:275
msgid "``>=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:276
msgid "``>>``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:277
msgid "``>>=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:278
msgid "``>>>``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:279
msgid "``~``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:280
msgid "``!``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:281
msgid "``!=``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:282
msgid "``!==``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:283
msgid "``,``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:284
msgid "``?``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:286
msgid "``#``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:288
msgid ""
"The KL compiler is \"greedy\" when looking for symbols: it looks for the "
"longest sequence of characters that are a valid symbol.  This is why ``==(``"
" is treated as the two symbols ``==`` and ``(``: there is no symbol starting"
" with ``==(`` but ``==`` is a symbol."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:296
msgid "Constants"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:298
msgid ""
"A constant is a token that is interpreted as a fixed value of a specific "
"type. KL supports five types of constants: boolean constants, integer "
"constants, floating-point constants, and string constants.  Each of these "
"are explained below."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:304
msgid "Boolean Constants"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:306
msgid ""
"The two keywords ``true`` and ``false`` are the two :dfn:`boolean "
"constants`.  They are each a value of type ``Boolean``."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:329
msgid "Integer Constants"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:331
msgid "An :dfn:`integer constant` can take one of three forms:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:333
msgid "The single digit ``0``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:334
msgid ""
"A decimal constant that starts with a single digit in the range ``1...9`` "
"followed by zero or more digits in the range ``0...9``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:335
msgid ""
"The two characters ``0x`` or ``0X`` followed by one or more characters in "
"one of the ranges ``0...9``, ``a...f`` and ``A...F``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:337
msgid ""
"In all cases, an integer constant may be optionally followed by an integer "
"type specification.  An integer type specification specified the "
"signededness and bit width of the integer and takes the form"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:339
msgid "The character ``s`` (signed) or the character ``u``, followed by:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:340
msgid "(optionally) ``8``, ``16``, ``32`` or ``64`` (the bit width)"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:342
msgid ""
"If no bit width is provided in the type specification the integer is 32-bit."
"  So, for example, ``145u`` is an unsigned 32-bit integer constant and "
"``78s`` is a signed 32-bit integer constant."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:344
msgid ""
"If no type specification is provided at all the integer is signed 32-bit.  "
"For example, ``5421`` is a signed 32-bit integer constant."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:363
msgid "Floating-Point Constants"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:365
msgid ""
"A :dfn:`floating-point constant` in KL is either of type ``Float32`` or type"
" ``Float64``.  The syntax follows closely that of C/C++, with ``Float32`` "
"corresponding to the C type ``float`` and ``Float64`` corresponding to the C"
" type ``double``:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:367
msgid "``1.2`` is of type ``Float64``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:368
msgid "``1.2f`` is of type ``Float32``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:369
msgid "``.7`` is of type ``Float64``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:370
msgid "``3.4e7`` and ``3.4e+7`` are of type ``Float64``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:371
msgid "``3.4e7f`` and ``3.4e+7f`` are of type ``Float32``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:372
msgid "``.5e-4f`` is of type ``Float32``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:374
msgid ""
"KL extends the C/C++ syntax by allowing more explicit specification of the "
"type using the ``f32`` and ``f64`` suffixes.  For example:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:376
msgid "``4.5e-6f32`` is the same as ``4.5e-6f``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:377
msgid "``2.874f64`` is the same as ``2.873``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:379
msgid ""
"If none of the ``f``, ``f32`` or ``f64`` suffixes are present then the "
"floating-point constant is an :dfn:`untyped floating-point constant`.  An "
"untyped floating-point constant automatically inherits the type of its "
"surrounding expression.  For instance, if the floating-point constant ``.5``"
" is added to a variable of type ``Float32`` then the constant is treated as "
"having type ``Float32``."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:413
msgid ""
"It is not possible to represent many decimal fractional expressions in IEEE "
"floating point format.  As such, do not be surprised if the output values of"
" such expressions appear to be slightly off, as seen in the example above "
"with the constant ``.12e20f32``."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:421
msgid "String Constants"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:423
msgid ""
"A :dfn:`string constant` is a constant value of type ``String``.  It takes "
"one of the following forms:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:425
msgid ""
"A sequence of characters, possibly including string constant escape "
"sequences (described below), enclosed in a pair of ``\"`` (double-quote) "
"characters; or"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:427
msgid ""
"A sequence of characters, possibly including string constant escape "
"sequences (described below), enclosed in a pair of ``'`` (single-quote) "
"characters; or"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:429
msgid ""
"A :dfn:`string constant escape sequence` is one of the following sequences "
"of characters, describing what the sequence is replaced by in the string:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:431
msgid "``\\n``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:432
msgid "a single newline (ASCII 10) character"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:433
msgid "``\\f``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:434
msgid "a single form feed (ASCII 12) character"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:435
msgid "``\\r``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:436
msgid "a single carriage return (ASCII 13) character"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:437
msgid "``\\t``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:438
msgid "a single carriage tab (ASCII 9) character"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:439
msgid "``\\v``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:440
msgid "a single vertical tab (ASCII 11) character"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:441
msgid "``\\a``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:442
msgid "a single bell (ASCII 7) character"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:443
msgid "``\\b``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:444
msgid "a single backspace (ASCII 8) character"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:445
msgid "``\\0``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:446
msgid "a single null (ASCII 0) character"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:447
msgid "``\\\"``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:448
msgid "a single double-quote (ASCII 34) character"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:449
msgid "``\\'``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:450
msgid "a single single-quote (ASCII 39) character"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:451
msgid "``\\\\``"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:452
msgid "a single backslash (ASCII 92) character"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:454
msgid ":samp:`\\\\x{HH}`"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:454
msgid ""
"A single character whose ASCII code is given in hexadecimal.  The two "
"characters :samp:`{HH}` must each be a hexadecimal character, ie. in one of "
"the ranges ``0...9``, ``a...f`` and ``A...F``.  For example, the escape "
"sequence ``0x0A`` (decimal 10) is equivalent to the escape sequence ``\\n`` "
"(ASCII 10)."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:465
msgid "The ``FILE`` and ``LINE`` Constants"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:467
msgid ""
"The two keywords ``FILE`` and ``LINE`` are special constants in a KL "
"program.  The keyword ``FILE`` is replaced by a string constant whose value "
"is the filename of the current file being compiled.  The keyword ``LINE`` is"
" similarly replaced with an integer constant whose value is the line number "
"of the current file being compiled.  So, for example, if the following KL "
"source code is passed on standard input:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:479
msgid "Program Structure"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:481
msgid ""
"A KL program consists of zero or more :index:`global declarations <single: "
"global declaration>` in sequence.  A global declaration is one of:"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:483
msgid ""
"A declaration of a function, a function prototype, an operator, a "
"constructor, a destructor, a method or an operator overload; see "
":ref:`functions`."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:485
msgid ""
"A declaration of a structure or an object; see :ref:`KLPG.types.structures` "
"and :ref:`KLPG.types.objects`."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:487
msgid ""
"A declaration of global named constant; see :ref:`KLPG.global.named-"
"constants`."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:489
msgid "A ``require`` statement; see see :ref:`KLPG.require`"
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:491
msgid ""
"In turn, functions, operators, and other similar constructs consist of zero "
"or more :index:`statements <single: statement>`.  Each statement is "
"terminated with a ``;`` (semicolon) character.  For more detailed "
"information on all the statements available in KL, see :ref:`statements`."
msgstr ""

#: ..\..\source\KLProgrammingGuide\syntax.rst:493
msgid ""
"A sequence of statements, surrounded by braces (a ``{`` and a ``}``), can "
"take the place of a single statement.  This also introduces a nested scope; "
"for more information, see :ref:`scope-compound-statement`."
msgstr ""
