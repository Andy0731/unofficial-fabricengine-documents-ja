#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\RTValProgrammingGuide\what.rst:4
msgid "What is an RTVal?"
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:6
msgid ""
"An :dfn:`RTVal` is a container for data that is managed by the KL "
"programming language.  The term \"RTVal\" is a mnemonic for \"Registered "
"Type Value\"; \"Registered Type\" is the historical name in "
"|FABRIC_PRODUCT_NAME| for KL types."
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:8
msgid ""
"An RTVal has three key attributes: they have a type, they have a value, and "
"they are reference-counted."
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:11
msgid "RTVals have Types"
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:13
msgid ""
"Every RTVal has a fixed KL type.  The type is specified when the RTVal is "
"created and cannot be changed."
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:15
msgid ""
"An RTVal can be of almost [#almost]_ any KL type.  The type can be an "
"internal, predefined type or a user-defined type such as a structure or an "
"object."
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:17
msgid ""
"The exceptions are types that \"internal\" types for interacting with other,"
" non-KL parts of the system, such as ``Container``."
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:20
msgid "RTVals have Values"
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:22
msgid ""
"Every RTVal has a value.  The initial value of the RTVal is determined when "
"the RTVal is created."
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:24
msgid ""
"Since RTVals are values in the KL programming language, they follow the same"
" lifecycle process as any other data.  When the RTVal is created, one of the"
" :ref:`contructors <KLPG.constructor>` for its type is called; similarly, "
"when an RTVal is destroyed, its :ref:`destructor <KLPG.destructor>` is "
"called."
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:26
msgid ""
"The value of an RTVal can change, usually through one of two mechanisms:"
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:28
msgid ""
"A (:ref:`read-write <KLPG.method.this-type>`) method of the RTVal's type is "
"called on the RTVal; or"
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:30
msgid ""
"The RTVal is passed to another method or function call taking an `io` "
"argument."
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:33
msgid "RTVals are Reference-Counted"
msgstr ""

#: ..\..\source\RTValProgrammingGuide\what.rst:35
msgid ""
"RTVals are reference-counted objects that are owned by the "
"|FABRIC_PRODUCT_NAME| client.  When the last reference to the RTVal is "
"dropped, it is destroyed.  In both Python and C++, assigning one RTVal value"
" to another simply copies a reference to the same underlying object."
msgstr ""
