#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\CoreOverview\dependency-graph.rst:2
msgid "Dependency Graph (Deprecated)"
msgstr "Dependency Graph (非推奨)"

#: ..\..\source\CoreOverview\dependency-graph.rst:4
msgid ""
"The dependency graph model in |FABRIC_PRODUCT_NAME| abstracts the concepts "
"of thread management from the user, enabling any developer to create highly "
"scalable multi-threaded applications."
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:8
msgid ""
"The dependency graph compute model in |FABRIC_PRODUCT_NAME| is deprecated "
"and will be removed in a future version.  New software should use the Canvas"
" compute model instead!"
msgstr ""
"|FABRIC_PRODUCT_NAME| での dependency graph compute model "
"は非推奨となりました。今後のバージョンで削除される予定です。Canvas モデルでの処理に切り替えてください。"

#: ..\..\source\CoreOverview\dependency-graph.rst:13
msgid "Multi-Threaded Evaluation"
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:18
msgid "Task-Based Parallelism"
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:20
msgid ""
"Each node in the dependency graph can have operators applied to it. "
"Operators define how the data should be processed and when it is propagated "
"through the graph. The binding of an operator to a node represents a task to"
" be executed. During evaluation of the graph |FABRIC_PRODUCT_NAME| can "
"simultaneously evaluate nodes that do not have dependencies on each other."
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:23
msgid "Data-Based Parallelism"
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:25
msgid ""
"Each node in the dependency graph can be sliced. Each member contained in a "
"node is duplicated according to the number of node slices. This enables "
"nodes to define homogeneous data sets by storing large quantities of data "
"across many slices. This enables data-based parallelism as operators bound "
"to a node can be invoked for each slice in parallel."
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:28
msgid "Dynamic Graph Manipulation"
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:30
msgid ""
"|FABRIC_PRODUCT_NAME| systems can be modified at runtime, meaning that the "
"behavior of a running application can be change based on such things as user"
" input or network events. Between evaluations of the Core, the dynamic "
"language can add or remove data, nodes, or operators. The structure of the "
"graph can be changed causing different behavior. A validation is performed "
"after modifications and then execution continues at full speed."
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:33
msgid "Event Graph"
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:35
msgid ""
"The Event graph is used to sequence the execution of a set of operators "
"through the construction of a tree structure. While the dependency graph is "
"used for multi-threaded evaluation, the event graph is used for single-"
"threaded evaluation. The event tree is built using a combination of a single"
" event node and a tree of event handlers arranged in a tree structure below "
"it. Evaluation always starts at the event node, then traverses the tree in a"
" depth-first fashion. Operators are evaluated during descent and during "
"ascent."
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:37
msgid ""
"Event handler nodes in the event tree can have nodes in the dependency graph"
" bound to them. When an event is fired, the nodes in the dependency graph "
"are bound to the event graph and are evaluated along with their "
"dependencies. This system of binding the event tree to the dependency graph "
"defines a dependency between the event tree and any number of nodes in the "
"dependency graph. Firing the event will cause the bound sections of the "
"dependency graph to be updated."
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:40
msgid "Rendering"
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:42
msgid ""
"The event graph is typically used to build rendering pipelines that draw to "
"the screen using OpenGL. Each viewport in |FABRIC_PRODUCT_NAME| provides a "
"custom event node that is fired whenever the viewport needs to be rendered. "
"This causes all of the operators in the tree to be evaluated in the sequence"
" that is defined by the structure of the tree."
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:44
msgid ""
"The structure of the event graph and the sequential evaluation of this graph"
" enable complex rendering configurations to be built. The resulting tree "
"evaluates quickly and can be modified at runtime."
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:47
msgid "Custom Events"
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:49
msgid ""
"Custom events can be constructed and tree structures built below them. These"
" events can be fired from the host language, which causes the operators in "
"the tree to evaluate and also returns data structures to the host language. "
"This enables tools to query data in the graph that may be distributed across"
" many nodes. In |FABRIC_PRODUCT_NAME|, the event system is used to compute "
"ray intersections with the geometry in the scene."
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:52
msgid "Documentation"
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:54
msgid ""
"Complete documentation for working with the dependency graph is provided in "
"the :ref:`DGPG`."
msgstr ""

#: ..\..\source\CoreOverview\dependency-graph.rst:15
msgid ""
"Nodes are constructed using the developer?fs preferred dynamic language, and"
" the developer defines dependencies between those nodes. Operators are "
"constructed and applied to the nodes in the graph. This combination of "
"nodes, dependencies, and KL operators describes a complete workload made up "
"of many tasks that can be distributed across available compute resources"
msgstr ""

#~ msgid ""
#~ "Nodes are constructed using the developer’s preferred dynamic language, and "
#~ "the developer defines dependencies between those nodes. Operators are "
#~ "constructed and applied to the nodes in the graph. This combination of "
#~ "nodes, dependencies, and KL operators describes a complete workload made up "
#~ "of many tasks that can be distributed across available compute resources"
#~ msgstr ""
