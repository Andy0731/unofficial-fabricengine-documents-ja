#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:4
msgid "Extension Reloading"
msgstr "エクステンションの再読み込み"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:8
msgid ""
"KL extension code can be reloaded in a running Fabric Engine instance inside"
" any DCC or in a standalone application. Right clicking on a Canvas node "
"also provides the option of reloading any dependent extensions of that node."
msgstr ""
"KLエクステンションコードは、Fabric EngineインスタンスがDCC上で実行中であろうと、スタンドアロンアプリケーションとして実行中であろうと、いつ"
"でも再読み込みができます。Canvas ノードの右クリックすると、そのノードの依存エクステンションのリロードオプションが表示されます。"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:10
msgid ""
"In general reloading a KL extension is most useful when the memory layout of"
" extension types and their function prototypes do not need to change but the"
" user wants to update the implementations of existing functions. Reloading "
"extensions should be safe as long as users are aware of the considerations "
"mentioned below."
msgstr ""
"KLエクステンションの通常の再読み込みは以下のような状況で特に有用です。エクステンションの型, "
"関数プロトタイプのメモリ上での配置が不変に保ったまま、既存関数の実装をアップデートしたい場合。エクステンションの再読み込みは下記の注意事項に気をつけるかぎり"
"において安全です。"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:13
msgid "API Functions"
msgstr "API 関数"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:15
msgid ""
"The relevant API functions for reloading KL extension code are "
"`FEC_ClientLoadExtension` and `FEC_RegisterKLExtension` in the C API and "
"`Client::loadExtension()` and `RegisterKLExtension` in the C++ and Python "
"APIs. See :ref:`clients` for more information on these functions and their "
"parameters. The `reload` parameter on these functions is new, if set to 0 "
"then these functions will error out as they would in the past if a user "
"tries to load an extension that's already been loaded, however if set to 1 "
"then that extension will be reloaded from disk (or from the provided source "
"code in the case of `RegisterKLExtension`)."
msgstr ""
"KLエクステンションの再読み込みに関連する API関数コードは、C APIの `FEC_ClientLoadExtension`,  "
"`FEC_RegisterKLExtension`  と、C++ and Python APIには `Client::loadExtension()`, "
"`RegisterKLExtension` があります。これらの関数とそのパラメータについてのより詳しい情報は :ref:`clients` "
"参照してください。これらの関数の `reload` パラメータは比較的新しく追加されたものです。0に設定した場合: "
"――過去にユーザがそのエクステンションを読み込もうとしていた場合―― 関数は既に読み込み済であるとエラーを出力する。1に設定した場合: "
"そのエクステンションはディスク （あるいは `RegisterKLExtension` 関数であれば指定したソースコード）より再読み込みされる。"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:18
msgid "Updating KL Type Member Layout"
msgstr "KL型のメンバのレイアウトのアップデート"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:20
msgid ""
"The memory representation or member layout of a KL type can not be changed "
"by reloading an extension and will result in an error if the user tries. In "
"order to change the memory representation of KL type all Core Clients must "
"be shut down and restarted. For example attempting to add a member to a "
"struct called 'MyStruct' while making a reload call will result in an error "
"that looks like::"
msgstr ""
"あるKLの型の、メモリ上での表現あるいはメンバのレイアウトは、エクステンションのリロードでは変更できません。そのようなことをしてしまうとエラーとなるでしょう"
"。KL型のメモリ上の表現を変更するには、すべてのCoreクライアントをいったん落とし再起動しましょう。例えば、ある構造体 'MyStruct' "
"にメンバを追加し、そのままリロードしてしまうと以下のようなエラーが発生します::"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:27
msgid "Updating KL Source Code"
msgstr "KLソースコードのアップデート"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:29
msgid ""
"All extension KL source code can be updated when reloading an extension, "
"however there are several important caveats to be aware of."
msgstr "すべてのエクステンションのKLソースコードはエクステンションリロードするとアップデートされます。ただしいくつかの注意点があります。"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:32
msgid "Extension Dependencies"
msgstr "エクステンション間の依存"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:34
msgid ""
"In the case of an extension which is dependent on a reloaded one, the "
"behavior depends on whether the functions being called are marked as "
"`function` or as `inline` in the reloaded extension. For example if "
"extension `Foo` looks like this::"
msgstr ""
"リロードをかけるエクステンションに他のものに依存がある場合、リロードするエクステンションの関数がどのように呼ばれるか ―― `function`, "
"`inline` どちらのマークがついているかに応じて振る舞いが変わります。例えばエクステンション `Foo` 外貨のような場合::"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:51
msgid "And extension `Bar` looks like this::"
msgstr "そしてエクステンション `Bar` が以下::"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:66
msgid ""
"Then if the source code of `Foo` is reloaded to provide different "
"implementations for the `foo()` and `bar()` methods, the `Bar` type will "
"only reflect the changes in the non-inlined `bar()` method. In order to "
"change the implementation of the inlined `foo()` the `Bar` extension would "
"need to be recompiled and the Core does not automatically reload dependent "
"extensions (though the user is free to reload it manually, which will force "
"a recompilation)."
msgstr ""
"`foo()`, `bar()` メソッドの実装を変更し `Foo` のソースコードをリロードすると、 `Bar` 型では非inlie関数である "
"`bar()`　メソッドのみしか変更が反映されません。インライン関数 `foo()` の実装への候を反映するには、 `Bar` "
"エクステンションの再コンパイルが必要です。さらにCore は自動で依存するエクステンションのリロードを行わないため、ユーザが手動でリロードをかけ再コンパイル"
"を強制させます。"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:69
msgid "Changing Function Prototypes or Adding/Removing Functions"
msgstr "関数プロトタイプの変更、関数の追加と削除"

#: ..\..\source\ExtensionAuthoringGuide\reloading.rst:71
msgid ""
"If the prototype of an existing KL function is changed inside an extension "
"(to change the parameter types, or add or remove parameters) or if new "
"functions are added or removed then any new KL code written against this "
"extension will be able to use the new functions, however any existing code "
"in dependent extensions that still refer to the old function prototypes will"
" continue to work but will use the old function. This can lead to confusing "
"scenarios where dependent extensions are using KL functions that may no "
"longer exist in any visible way."
msgstr ""
"あるエクステンション内で、A．既存KL関数のプロトタイプを変更する（パラメータの型の変更、パラメータの追加,削除など）"
"B.関数を追加,削除する場合、このエクステンションに対するあたらしいKLコードは、新しい関数を使用可能です。ただし、エクステンションが依存する既存コードは古"
"い関数プロトタイプへ参照したままとなり古い関数を使用してしまいます。依存エクステンションが、すでに目視不可能な存在しないKL関数を使用してしまい、多大な混乱"
"を生じてしまいます。"
