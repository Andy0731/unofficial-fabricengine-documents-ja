#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:4
msgid "The :command:`kl2edk` Utility"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:6
msgid ""
"As of |FABRIC_PRODUCT_NAME| version 1.11.0 there is a utility called "
":command:`kl2edk` that greatly helps extension development by automatically "
"generating C++ versions of KL types as well as function prototypes for the "
"C++ functions that need to be provided by the extension."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:8
msgid ""
"If you use the build script included in the sample extension as a base for "
"building your custom extension then :command:`kl2edk` will automatically be "
"run for you as part of the build process.  If you need to use a different "
"build system then you will need to invoke :command:`kl2edk` as part of the "
"build process. The usage of :command:`kl2edk` is very straightforward; "
"simply run :command:`kl2edk --help` from a command prompt for detailed usage"
" information."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:11
msgid "Required Build Flags"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:13
msgid ""
"If you are using the sample extension's SConscript file as a base for your "
"custom extension then the required compile flags will already be set in "
"there. If you are setting up a custom build environment and are on Linux or "
"OSX then you will need to ensure that the :samp:`-fno-omit-frame-pointer` "
"build flag is passed to the compiler. Frame pointer omission is an "
"optimization that must be disabled for our KL stack trace generation to work"
" (a feature that outputs a KL stack trace on runtime errors). Failing to add"
" this flag will result in crashes on KL errors within the C++ portion of "
"your extension. The requirement of using this flag may be removed in an "
"upcoming version."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:16
msgid "The Generated Header Files"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:18
msgid ""
"The header files generated by :command:`kl2edk` from the KL source files by "
"default includes three sections."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:20
msgid ""
"The first section includes the base :file:`FabricEDK.h` file that provides "
"basic types and macros that are needed for the rest of the header as well as"
" for general extension development.  We discuss :code:`FabricEDK.h` more "
":ref:`below <EAG.kl2edk.EDK.h>`."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:22
msgid ""
"The second section provides C++ versions of all KL structures, objects and "
"interfaces that can potentially be referenced by the KL source code. We "
"provide more information about this in the section :ref:`EAG.types`."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:24
msgid ""
"The third section provides C++ prototypes for the functions expected to be "
"implemented by the extension in native code.  This are precisely the "
"functions that include :samp:`= \"{FunctionSymbolNane}\";` in the KL "
"function declarations.  These prototypes will cause a compiler error in the "
"C++ extension code if the function does not have an exact signature match; "
"this helps to ensure that the C++ function is able to interface correctly "
"with the KL code that calls it."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:27
msgid "Cpp Code Generation"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:28
msgid ""
":command:`kl2edk` can also be used to generate the function implementations "
"as well as the extension main cpp files. To autogenerate the conversions "
"between the C++ types and the KL types, one additional json file can be "
"provided to assist :command:`kl2edk` when generating code. The file has to "
"be suffixed with :samp:`.codegen.json` and prefixed with the same name as "
"the extension :samp:`.fpm.json` file."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:32
msgid ""
"The codegen json file is optional, :command:`kl2edk` will still generate cpp"
" files with empty function bodies if it doesn't exist."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:34
msgid ""
":command:`kl2edk` will attempt to generate bodies for your C++ methods based"
" on the provided codegen json file. Please see the json example below for "
"more information. Any incomplete cpp function will contain a warning pragma,"
" which will allow you to see the missing implementations at compile time. To"
" enable cpp code generation you need to specify the output folder for the "
"cpp files with the -c command line flag like so:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:40
msgid ""
"This will put all of the generated headers into the folder "
":samp:`/temp/test/h` and the the generated implementation files in the "
"corresponding folder."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:42
msgid ""
"The code generation relies on conversion functions to be provided. The "
"conversion functions have to use the following notation:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:56
msgid ""
"The sample below will illustrate a simple case. Note that the example is "
"trivial and not a production relevant scenario. :samp:`printf` of course "
"provides redundant functionality which is already covered by KL's "
":samp:`report` function."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:58
msgid "KL file content:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:65
msgid "codegen.json file content:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:102
msgid "Resulting generated c++ code:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:155
msgid ""
":command:`kl2edk` will never overwrite existing cpp files, but instead write"
" files suffixed with :samp:`.stubs`."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:157
msgid "The content of the codegen file in a little more detail:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:159
msgid ""
":samp:`header`: a string (can be multi-line) which gets inserted into every "
"generated cpp right after the standard includes. this can be useful to "
"include thirdparty api headers etc. This should also provide additional "
"includes such as the conversion functions."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:161
msgid ""
":samp:`functionentry`: a macro which is called on every function entry. This"
" parameter is optional, so leave this field empty if you do not need to "
"bracket your functions with entry/exit statements. The notation of the macro"
" should be (the name ENTRYMACRO of course is up to you). "
"ENTRYMACRO(symbolname)."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:163
msgid ""
":samp:`functionexit`: a macro which is called on every function exit for "
"void functions. This parameter is optional, so leave this field empty if you"
" do not need to bracket your functions with entry/exit statements. The "
"notation of the macro should be: EXITMACRO(symbolname)"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:165
msgid ""
":samp:`functionexitreturn`: a macro which is called on every function exit "
"for functions with return values. this is optional. The notation of the "
"macro should be: EXITRETURNMACRO(symbolname, defaultValue)"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:167
msgid ""
":samp:`parameterprefix`: A prefix used for the native data type parameter "
"names. This is parameter mandatory and must be specified."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:169
msgid ""
":samp:`typemapping`: A dictionary providing information for all type "
"conversions. The key of the dictionary contains the KL type. The flags in "
"the dictionary are:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:171
msgid ":samp:`ctype`: the native type to be converted to"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:173
msgid ""
":samp:`from`: the function to be called to perform the from conversion, from"
" KL type to native type. the notation of both the to and from conversion "
"functions has to be :samp:`bool conversion(const fromType & from, toType & "
"to);` The conversion functions need to return true or false to flag the "
"conversion as successful or not. the conversion functions can also call on "
":samp:`Fabric::EDK::setError` or raise an exception, for example, to provide"
" more information about an unsuccessful conversion."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:175
msgid ""
":samp:`to`: the function to be called to perform the to conversion, from "
"native to KL type."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:177
msgid ""
":samp:`defaultvalue`: the default value to be used for the type for non void"
" functions."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:179
msgid ""
":samp:`methodop`: an operator to use when accessing methods on the native "
"type. this can be \".\" or \"->\"."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:183
msgid ""
":samp:`parameterconversionstoskip`: Optionally you can specify an array here"
" of strings containing a combination of a c++ symbol name and a parameter. "
"Each symbol and parameter will be skipped for the code generation when "
"creating the parameter conversion code. For example:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:191
msgid ""
":samp:`methodmapping`: Additionally you can specify a dictionary containing "
"a string map from c++ symbolname to class method name. This can be important"
" when you have multiple implementations of the same method name in KL, since"
" the c++ symbolnames have to be different. Example:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:201
msgid "Namespacing"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:203
msgid ""
"All macros provided by :file:`FabricEDK.h`, with the exception of "
":code:`IMPLEMENT_FABRIC_EDK_ENTRIES` (below), begin with "
":code:`FABRIC_EDK_...`.  All C++ types and functions provided by "
":file:`FabricEDK.h` as well as the  header file generated by "
":command:`kl2edk` are defined in the :code:`Fabric::EDK` namespace.  Both of"
" this are to avoid conflicts with third-party libraries."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:205
msgid ""
"For convenience, you can use the :code:`use namespace` functionality of C++ "
"to avoid prefixing the types and functions:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:211
msgid ""
"However, we recommend manually prefixing types and functions so that it is "
"easier to find them in the case of a future API change."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:216
msgid "The :file:`FabricEDK.h` Header File"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:218
msgid "The C++ source code for an extension must always begin with the lines:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:226
msgid ""
"The first line includes the header file generated by :command:`kl2edk`, "
"which in turn includes :file:`FabricEDK.h`.  The second line implements some"
" internal functions that allow the |FABRIC_PRODUCT_NAME| core to initialize "
"the extension."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:228
msgid ""
"In addition to providing a definition for the "
":code:`IMPLEMENT_FABRIC_EDK_ENTRIES` macro, the :file:`FabricEDK.h` header "
"file provides definitions for built-in KL types (see :ref:`EAG.types`), "
"several macros required for definitions of functions and custom types, and "
"several debugging and error-handling functions."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:231
msgid "Build Macros"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:233
msgid ""
":file:`FabricEDK.h` provides several flags that can be used to detect "
"various aspects of the system on which the extension is being built.  Each "
"of these should be tested using the :code:`#ifdef` C++ preprocessor "
"directive."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:235
msgid ":code:`FABRIC_EDK_PLATFORM_POSIX`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:236
msgid ""
"The current system is a \\*NIX-type system; defined on Linux and Mac OS X."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:238
msgid ":code:`FABRIC_EDK_PLATFORM_WINDOWS`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:238
msgid "The current system is a Windows system; defined on Windows"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:240
msgid ":code:`FABRIC_EDK_OS_LINUX`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:241
msgid "The current system is running some version of Linux"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:242
msgid ":code:`FABRIC_EDK_OS_DARWIN`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:243
msgid "The current system is running some version of Mac OS X"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:245
msgid ":code:`FABRIC_EDK_OS_WINDOWS`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:245
msgid "The current system is running some version of Windows"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:247
msgid ":code:`FABRIC_EDK_ARCH_64BIT`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:248
msgid "The current system is running a 64-bit operating system"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:250
msgid ":code:`FABRIC_EDK_ARCH_32BIT`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:250
msgid "The current system is running a 32-bit operating system"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:252
msgid ":code:`FABRIC_EDK_BUILD_RELEASE`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:253
msgid ""
"The current build is a release build with optimizations enabled and debug "
"symbols disabled"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:255
msgid ":code:`FABRIC_EDK_BUILD_DEBUG`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:255
msgid ""
"The current build is a debug build with optimizations disabled and with "
"debug symbols enabled"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:258
msgid "The :code:`FABRIC_EXT_EXPORT` Function Definition Prefix"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:260
msgid ""
":file:`FabricEDK.h` provides the single function definition macro "
":code:`FABRIC_EXT_EXPORT` that should prefix any function definition that "
"should be made available in KL.  For example::"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:269
msgid ""
"If you use the :command:`kl2edk` utility to generate the header file for "
"your extension and then copy the function prototypes for your function "
"implementations then they will already use :code:`FABRIC_EXT_EXPORT`."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:271
msgid ""
":code:`FABRIC_EXT_EXPORT` does two things: it guarantees that the symbol is "
"visible (\"exported\") in the native code shared library, and it disables "
"\"mangling\" of the symbol name so that the name of the exported symbol is "
"exactly the function name."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:275
msgid ""
"Only symbols that will be called from KL need the :code:`FABRIC_EXT_EXPORT` "
"prefix; other functions and methods in the native code source file can be "
"left without the prefix."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:278
msgid "Debugging and Error-Handling Functions"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:280
msgid ""
":file:`FabricEDK.h` provides several functions and macros that are used for "
"debugging and error handling."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:285
msgid ""
"The equivalent of the KL ``report`` function.  The first variation takes a "
"``printf``-style format string and a list of arguments, while the second "
"takes a string length and a pointer to raw character data."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:290
msgid "Aliases for ``Fabric::EDK::report``."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:294
msgid ""
"Returns a C-style null-terminated string that is the name of the extension."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:300
msgid ""
"The equivalent of the KL ``setError`` function.  The first variation takes a"
" ``printf``-style format string and a list of arguments, the second takes a "
"string length and a pointer to raw character data, and the third takes an "
"STL ``std::string``."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:306
msgid ""
"The equivalent of the KL ``throw`` statement.  The first variation takes a "
"``printf``-style format string and a list of arguments, the second takes a "
"string length and a pointer to raw character data, and the third takes an "
"STL ``std::string``."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:308
msgid ""
"You must use the ``Fabric::EDK::throwException`` function to throw an "
"exception from within an extension; using the C++ ``throw`` keyword will not"
" work."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:311
msgid "Older Extensions (before kl2edk)"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:315
msgid ""
"Some users may have older extensions which are not yet using kl2edk. For "
"these users there is an additional `#define` which must be declared before "
"calling :code:`IMPLEMENT_FABRIC_EDK_ENTRIES`. An example of this define can "
"be seen here:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:325
msgid ""
"This `#define` specifies the version of extensions on which the current one "
"depends as a static array terminated by an entry which is all zeros. In the "
"above example the `MyExtensionName` extension depends on version 1.5.2 of "
"the `MyDependentExt` extension. When matching extensions Fabric will match "
"any extension in the minor version range greater than or equal to the "
"specified version, so in this example `MyDependentExt` >= 1.5.2 and < 1.6.0 "
"will match."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:327
msgid "The values passed in each row of the `DEPENDENT_EXTS` define are:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:329
msgid "Extension name"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:331
msgid "Major version number"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:333
msgid "Minor version number"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:335
msgid "Patch version number"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:337
msgid "(optional) Override value (see :ref:`EXTS_VERSIONING`)"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\kl2edk.rst:181
msgid ""
":samp:`functionbodies`: Optionally you can specify a dictionary here of "
"function body implementations. This doesn?ft not have to include the "
"conversions, these will be added automatically by kl2edk. You only need to "
"worry about the third-party api specific implementation code. As seen in the"
" json example above, the callback :samp:`String_printf` will be generated "
"with the additional lines of C++ code provided."
msgstr ""

#~ msgid ""
#~ ":samp:`functionbodies`: Optionally you can specify a dictionary here of "
#~ "function body implementations. This doesn’t not have to include the "
#~ "conversions, these will be added automatically by kl2edk. You only need to "
#~ "worry about the third-party api specific implementation code. As seen in the"
#~ " json example above, the callback :samp:`String_printf` will be generated "
#~ "with the additional lines of C++ code provided."
#~ msgstr ""
