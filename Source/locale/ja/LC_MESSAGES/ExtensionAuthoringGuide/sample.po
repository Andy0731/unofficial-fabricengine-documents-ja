#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:4
msgid "Understanding the Sample Extension"
msgstr "サンプルエクステンションの解説"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:6
msgid ""
"In this section we go through each of the files in the sample extension that"
" you built in the last section.  By understanding how these files work and "
"fit together you will understand the basics of how extensions work in "
"|FABRIC_PRODUCT_NAME|."
msgstr ""
"この節では前節でビルドしたサンプルエクステンションに含まれるそれぞれのファイルを一通り見ていきましょう。一連のファイルがお互いどのように機能するかを通し、 "
"|FABRIC_PRODUCT_NAME| におけるエクステンションがどのように機能するかを理解していきます。"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:9
msgid ":file:`HelloWorld.fpm.json`"
msgstr ":file:`HelloWorld.fpm.json`"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:11
msgid ""
"The only required file in an extension is the extension manifest file; in "
"the sample extension it is the file :file:`HelloWorld.fpm.json`, and its "
"contents are:"
msgstr ""
"エクステンションに唯一必須であるファイルは、エクステンションマニフェストファイルです；サンプルでは :file:`HelloWorld.fpm.json` "
"が該当、具体的内容は以下"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:20
msgid ""
"The extension manifest file must end with the :file:`.fpm.json` suffix, and "
"the part of the filename leading up to :file:`.fpm.json` is by definition "
"the name of the extension.  The name of the extension is what is used "
"include the extension using the :samp:`require {ExtensionName};` statement "
"in KL or using the :code:`exts` parameter when creating a "
"|FABRIC_PRODUCT_NAME| core client."
msgstr ""
"エクステンションマニフェストは、 :file:`.fpm.json` で終わらせます。 :file:`.fpm.json` "
"の前にくっつくファイル名はすなわち <エクステンション名> を表します。このエクステンション名が、KLにおける :samp:`require "
"{ExtensionName};` 文によるエクステンションインクルードのエクステンション、あるいは |FABRIC_PRODUCT_NAME| "
"coreクライアント作成時の :code:`exts` パラメータになります。"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:22
msgid ""
"The contents of the manifest file are in JSON format (see `http://json.org/ "
"<http://json.org/>`_), and must be a single JSON object.  The two members of"
" the JSON object are :code:`libs` and :code:`code`; both are optional."
msgstr ""
"マニフェストファイルの内容は JSON形式で単一JSONオブジェクトとして記述します (see `http://json.org/ "
"<http://json.org/>`_)  サンプルにおけるJSONオブジェクトは :code:`libs` and :code:`code`; "
"これら2つはオプショナルです。"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:24
msgid ""
"The value of :code:`libs` is either a string or an array of strings.  Each "
"string is the base name of a shared library that is part of the extension.  "
"The actual filename of the shared library depends on the platform; the "
":file:`SConstruct` file that comes with the sample extension takes care of "
"building a shared library with the right filename for the platform it is "
"built on.  This means that you can (and should) use the same SConstruct file"
" to build the extension on all the platforms the extension supports."
msgstr ""
":code:`libs` の値は、文字列, 文字列の配列 どちらも許容します。どの文字列も、エクステンションをなす共有ライブラリのベース名です。実際の共有ラ"
"イブラリのファイル名はプラットフォームに依存します。サンプルの :file:`SConstruct` "
"ファイルが、共有ライブラリのビルドをビルドを実行するプラットフォームに沿う正しいファイル名で扱います。つまりエクステンションがサポートする全プラットフォーム"
"に対し、同じ SConstruct ファイルによってビルドを行うことができます。（可能というだけでなく勿論そうすべきです）"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:26
msgid ""
"The value of :code:`code` is a filename of a KL source file (including the "
"``.kl`` extension), or an array of such filenames.  All of the provided "
"files are compiled and included into KL code wherever the :samp:`require "
"{ExtensionName};` statement is used to include the extension."
msgstr ""
":code:`code` の値は KL ソースファイルのファイル名（文字列単体でも配列でも）です( ``.kl`` "
"なエクステンションも含みます)。これらはコンパイルされ KLコードに含まれることになり :samp:`require {ExtensionName};` "
"文によりエクステンションインクルードに使用します。"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:28
msgid ""
"|FABRIC_PRODUCT_NAME| detects an extension by finding a :file:`.fpm.json` "
"file somewhere in the extensions path.  The extensions path includes all the"
" directories listed in the :envvar:`FABRIC_EXTS_PATH` environment variable, "
"if present, as well as several predefined, platform-dependent directories "
"that contain extensions that are included with the base install of "
"|FABRIC_PRODUCT_NAME|.  |FABRIC_PRODUCT_NAME| requires that the files "
"referred to by the :code:`libs` and :code:`code` members in the extension "
"manifest be in the same directory as the extension manifest file itself."
msgstr ""
"|FABRIC_PRODUCT_NAME| ではエクステンションの検出にエクステンションパス中に存在する :file:`.fpm.json` "
"ファイルを用います。エクステンションパスとは、環境変数 :envvar:`FABRIC_EXTS_PATH` "
"に列挙された全てのディレクトリを含みます。このディレクトリには |FABRIC_PRODUCT_NAME| "
"をインストールした際のプラットフォームに依存した基本エクステンションが存在する、事前定義されたディレクトリを含みます。 "
"|FABRIC_PRODUCT_NAME| では、 エクステンションマニフェスト中の :code:`libs` と :code:`code` "
"メンバは同じエクステンションマニフェストと同じディレクトリに存在しなければなりません。"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:30
msgid ""
"For more information about :file:`.fpm.json` files, see :ref:`EAG.fpm`."
msgstr ":file:`.fpm.json` についてのより詳細な情報は :ref:`EAG.fpm` を参照してください"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:33
msgid ":file:`HelloWorld.kl`"
msgstr ":file:`HelloWorld.kl`"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:35
msgid ""
"The :file:`HelloWorld.kl` source file includes KL source code that is "
"included whenever the :samp:`require {ExtensionName};` statement includes "
"the extension by name from other KL source.  For instance, if a KL operator "
"wants to use the functionality provided by the :code:`HelloWorld` sample "
"extension, it should include the statement ``require HelloWorld;`` at the "
"top of the operator code.  The contents of the :file:`HelloWorld.kl` file "
"are simple::"
msgstr ""
":file:`HelloWorld.kl` ソースファイルは、 :samp:`require {ExtensionName};` により、他の "
"KLソースからこのエクステンションを名前で読み込んでくる際にインクルードすることになる、 KL ソースコードです。換言すると "
":code:`HelloWorld`  エクステンションの提供する機能を、とある KLオペレータで使用したいのであれば、オペレータのコードの一番上に  "
"``require HelloWorld;`` とするとインクルードできます。 :file:`HelloWorld.kl` ファイルの内容は単純です::"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:39
msgid ""
"This is a KL statement that refers to a function defined in the native code "
"shared library.  The key element here is the ``= \"GetHelloWorldString\"`` "
"part: this tells KL that the function is called :code:`GetHelloWorldString` "
"in the native code shared library.  If this is missing, there will be a "
"linking problem when the library is loaded because by default KL functions "
"have complex internal naming.  The ``= \"GetHelloWorldString\"`` notation is"
" simply telling KL the symbol name in the shared library."
msgstr ""
"これは KL文であり、ネイティブコードの共有ライブラリで定義された関数を参照しています。一番重要な点は、 ``= "
"\"GetHelloWorldString\"`` です：これは KLに、「この関数はネイティブコード共有ライブラリの中で "
":code:`GetHelloWorldString` として呼ばれるものだ」ということを示しています。これを欠いてしまうと、ライブラリをロードした途端、リ"
"ンク問題をひきおこします。なぜならディフォルトでは KL関数は複雑な内部名を持つためです。 ``= \"GetHelloWorldString\"`` "
"という記法は KLへと共有ライブラリでのシンボル名を単純に伝達しているわけです。"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:41
msgid ""
"Note that a KL source file can also include type definitions (eg. through "
"the `struct` keyword), method definitions, operator definitions, and "
"everything else available in KL.  You can use the same ``= \"...\"`` "
"notation to bind methods to code within the native code shared library."
msgstr ""
"注意点：KLソースファイルは 型定義（ `struct` キーワードを使用）や、メソッド定義、オペレータ定義、その他 KL "
"で可能なことは全てを含めることができます。先ほど同じ ``= \"...\"`` 記法によってメソッドとネイティブコード共有ライブラリでのコードをバインドす"
"ることができます。"

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:44
msgid ":file:`HelloWorld.cpp`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:46
msgid ""
"The file :file:`HelloWorld.cpp` contains the C++ source code for the native "
"code shared library.  Its contents are:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:64
msgid ""
"The :code:`#include \"HelloWorld.h\"` line includes the C++ header file with"
" all the definitions for the the |FABRIC_PRODUCT_NAME| EDK (Extension "
"Development Kit)."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:66
msgid ""
"The file :file:`HelloWorld.h` is generated from :file:`HelloWorld.kl` using "
"the :command:`kl2edk` utility; this action is automatically performed by the"
" :file:`SConstruct` build script.  The :command:`kl2edk` command generates "
"C++ representations of all custom structure, object and interfaces types "
"used in the KL source files, as well as function prototypes for the required"
" C++ functions.  For more information about :command:`kl2edk`, see "
":ref:`EAG.kl2edk`."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:68
msgid ""
"The line :code:`using namespace Fabric::EDK;` allows us to reference EDK "
"functions and types without prefixing them with the EDK namespace; this is "
"purely a notational convenience."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:70
msgid ""
"The :code:`IMPLEMENT_FABRIC_EDK_ENTRIES` line is required to be present "
"exactly once in ever extension.  It takes a single parameter which must be "
"the name of the extension.  Its purpose is to implement internal functions "
"that are used to load the extension."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:72
msgid ""
"There is a variant of :code:`IMPLEMENT_FABRIC_EDK_ENTRIES` called "
":code:`IMPLEMENT_FABRIC_EDK_ENTRIES_WITH_SETUP_CALLBACK` that takes a second"
" parameter which is the address of a function to call at the end of the "
"initialization process.  It allows you to inject one-time setup code into "
"extensions."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:74
msgid ""
"The remaining code is the definition of a function that is made available to"
" KL.  There are several important points:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:76
msgid ""
"Functions made available to KL must be prefixed with the "
"``FABRIC_EXT_EXPORT`` keyword.  The purpose of the keyword is to ensure that"
" the function has an unmangled symbol name and the right calling convention."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:78
msgid ""
"Note the use of the :code:`KL::String` type for the first parameter, and "
"note that this is the value that is returned from the function with the KL "
"declaration :code:`function String GetHelloWorldString()`.  We will talk "
"more about this in the section on calling conventions."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:81
msgid ":file:`test.py`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:83
msgid ""
"The :file:`test.py` file is a Python source file that creates a simple "
"|FABRIC_PRODUCT_NAME| dependency graph and uses it to call the "
":code:`GetHelloWorldString` function that is provided in the "
":code:`HelloWorld` extension."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:85
msgid ""
"The first few lines of the file explicitly add the current directory to the "
":envvar:`FABRIC_EXTS_PATH` environment variable:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:95
msgid ""
"Usually a custom extension will be installed at a predefined location that "
"is set in advance in the :envvar:`FABRIC_EXTS_PATH` variable, but it is also"
" possible to set the variable like this.  The value of "
":envvar:`FABRIC_EXTS_PATH` must be modified before the core client is "
"created."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:97
msgid ""
"The next two lines create a |FABRIC_PRODUCT_NAME| client.  We communicate "
"directly with the core of |FABRIC_PRODUCT_NAME| as it is the easiest way to "
"demonstrate the functionality of an extension:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:122
msgid ""
"Note the first line :code:`require HelloWorld;`: this statement is required "
"to make available the declaration of the :code:`GetHelloWorldString` "
"function.  The require statement essentially includes all of the KL source "
"code that is provided in the extension; in this case, the code in "
":file:`HelloWorld.kl`."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:124
msgid ""
"The next few lines create a node with a member of type :code:`String`, binds"
" the operator to the node and then evaluates the node.  This causes the "
":code:`entry` operator to run which in turn calls the "
":code:`GetHelloWorldString` function in the extension:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:137
msgid ""
"The next line verifies that the operator did in fact set the member to the "
"right value:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:143
msgid "Finally, we close the client so that the script will exit:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:150
msgid ":file:`SConstruct`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:152
msgid ""
"The :file:`SConstruct` file is used to build the extension.  The only lines "
"of interest are the last ones:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:161
msgid ""
"This line directs :command:`scons` to build an extension named "
":code:`HelloWorld` using the native code source file :file:`HelloWorld.cpp` "
"as well as the KL source code file :file:`HelloWorld.kl`.  The build "
"commands cause the header file :file:`HelloWorld.h` to be generated from the"
" input KL source files using the :command:`kl2edk` tool.  The resulting "
":file:`HelloWorld.h` is then included by :file:`HelloWorld.cpp`."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\sample.rst:104
msgid ""
"The next several lines create an KL operator.  The KL operator calls the "
":code:`GetHelloWorldString` provided by the extension and stores the result "
"in an :code:`io` parameter that is later bound to a node member:"
msgstr ""

#~ msgid ""
#~ "The next several lines create an KL operator.  The KL operator calls the "
#~ ":code:`GetHelloWorldString` provided by the extension and stores the result "
#~ "in an :code:`io` parameter that is later bound to a node member::"
#~ msgstr ""

#~ msgid "opSource = ["
#~ msgstr ""

#~ msgid ""
#~ "\"require HelloWorld;\", \"\", \"operator entry(io String string) {\", \"  "
#~ "report(\"KL: Enter entry\");\", \"  string = GetHelloWorldString();\", \"  "
#~ "report(\"KL: GetHelloWorldString returned: \" + string);\", \"  report(\"KL:"
#~ " Leave entry\");\", \"}\""
#~ msgstr ""

#~ msgid ""
#~ "] op = fabricClient.DG.createOperator(\"op\") "
#~ "op.setSourceCode(\"\\n\".join(opSource)) op.setEntryPoint(\"entry\")"
#~ msgstr ""
