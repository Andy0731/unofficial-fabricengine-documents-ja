#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\ExtensionAuthoringGuide\types.rst:4
msgid "Types and Extensions"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:6
msgid ""
"In this section we learn more about the relationship between types in KL and"
" corresponding types in extensions."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:8
msgid ""
"The header file generated by :command:`kl2edk` as well as the "
":file:`FabricEDK.h` header file it includes provide definitions for the "
"built-in KL types, any types defined by the extension, and any types defined"
" by other extensions required by the extension.  All of these types are "
"defined in the :code:`Fabric::EDK::KL` namespace."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:12
msgid ""
"For brevity, all types in this section will be referred to without the "
"``Fabirc::EDK::`` namespace prefix as if the :code:`using namespace "
"Fabric::EDK;` directive had been issued."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:17
msgid "Simple Types"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:19
msgid "The simple types are all simply aliases for existing C++ types."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:21
msgid ""
"When a simple type is passed as an :code:`in` parameter from KL, the "
"corresponding parameter in C++ should be a \"pass-by-value\", ie. without "
"the ``&`` pass-by-reference symbol.  Similarly, an extension function that "
"returns a value that is a simple type should just return the value directly "
"rather than use a \"hidden return parameter\".  See :ref:`cconv.simple` for "
"more information about the calling convention for simple types."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:23
#: ..\..\source\ExtensionAuthoringGuide\types.rst:55
msgid "``KL::Boolean``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:25
msgid ""
"The KL ``Boolean`` type.  You can assign the C++ constants ``true`` and "
"``false`` to expressions of this type."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:27
msgid ""
"``KL::UInt8``, ``KL::SInt8``, ``KL::UInt16``, ``KL::SInt16``, "
"``KL::UInt32``, ``KL::SInt32``, ``KL::UInt64``, ``KL::SInt64``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:29
msgid "The KL integer types; equivalent to the KL types of the same name."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:31
msgid "``KL::Float32``, ``KL::Float64``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:33
msgid ""
"The KL floating-point types; equivalent to the KL types of the same name."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:35
msgid ""
"``KL::Byte``, ``KL::Integer``, ``KL::Index``, ``KL::Size``, ``KL::Scalar``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:37
msgid ""
"KL built-in type aliases; they alias the same type as in the KL language."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:39
msgid "``KL::Data``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:41
msgid ""
"The KL :code:`Data` type.  This is simply a type alias for :code:`void *`; "
"however, there is a :code:`KL::DataWrapper` template provided by "
":file:`FabricEDK.h` that makes it much easier to work with these pointers; "
"see :ref:`EAG.types.data` for more information."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:47
msgid "Equivalences for Simple Types"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:49
msgid ""
"Since simple types are just aliases for preexisting C++ types, you can use "
"corresponding C++ types in place of them wherever convenient.  The following"
" table shows equivalent C++ types for each KL simple type:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:53
msgid "KL Type"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:53
msgid "Equivalent C++ type(s)"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:55
msgid "``bool``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:57
msgid "``KL::UInt8``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:57
msgid "``uint8_t``, ``unsigned char``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:59
msgid "``KL::UInt16``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:59
msgid "``uint16_t``, ``unsigned short``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:61
msgid "``KL::UInt32``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:61
msgid "``uint32_t``, ``unsigned int``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:63
msgid "``KL::UInt64``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:63
msgid "``uint64_t``, ``unsigned long long``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:65
msgid "``KL::SInt8``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:65
msgid "``int8_t``, ``char``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:67
msgid "``KL::SInt16``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:67
msgid "``int16_t``, ``short``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:69
msgid "``KL::SInt32``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:69
msgid "``int32_t``, ``int``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:71
msgid "``KL::SInt64``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:71
msgid "``int64_t``, ``long long``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:73
msgid "``KL::Float32``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:73
msgid "``float``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:75
msgid "``KL::Float64``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:75
msgid "``double``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:81
msgid ""
"The :samp:`KL::DataWrapper<{Ty}>` and :samp:`KL::ConstDataWrapper<{Ty}>` "
"Templates"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:83
msgid ""
"In order to simplify use of the :code:`KL::Data` type, :file:`FabricEDK.h` "
"provides the templates :samp:`KL::DataWrapper<{Ty}>` "
":samp:`KL::ConstDataWrapper<{Ty}>` that allows you to treat a value of type "
":code:`KL::Data` as if it were a pointer to a more complex type.  "
":samp:`KL::DataWrapper<{Ty}>` allows modification of the resulting complex "
"type whereas :samp:`KL::ConstDataWrapper<{Ty}>` allows it only to be read.  "
"The best explanation is through an example:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:106
msgid "Complex Types"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:108
msgid ""
"The complex types do not correspond directly to an existing C++ type, but "
"instead have a complex representation as a C++ class or template in header "
"file generated by :command:`kl2edk` or the :file:`FabricEDK.h` header file."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:110
msgid ""
"Complex types must always be passed by reference in C++ functions "
"corresponding to KL functions, even when they are :code:`in` parameters in "
"KL; similarly, they must always be returned through a \"hidden return "
"parameter\".  This is usually done using the :code:`::INParam` and "
":code:`::Result` typedefs.  For more information, see :ref:`cconv.complex`."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:112
msgid ""
"Unlike KL (in guarded mode), there are generally no checks for array indices"
" or other lookups when using complex types.  It is the responsibility of the"
" programmer to ensure that these operations are within bounds."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:117
msgid ":code:`KL::String`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:119
msgid ""
"Provides the functionality of the KL ``String`` type.  It supports the usual"
" empty constructor, copy constructor, and assignment operator, as well as "
"following methods:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:123
msgid "Returns the string contents as a C-style null-terminated string."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:127
#: ..\..\source\ExtensionAuthoringGuide\types.rst:131
msgid "Returns the string contents as a raw pointer to character data."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:135
msgid "Appends a character to the string."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:139
msgid "Alias for ``void KL::String::append(char ch)``."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:143
msgid "Appends another string given as a raw character pointer and a length."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:147
msgid "Appends another string given as a C-style null-terminate string."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:151
msgid "Alias for ``void KL::String::append(char const *cStr)``."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:155
msgid "Appends another :code:`KL::String`."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:159
msgid "Alias for ``void KL::String::append(KL::String const &that)``."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:164
msgid ":samp:`KL::VariableArray<{Ty}>`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:166
msgid ""
"Provides the functionality of a variable array of the type :samp:`{Ty}`, "
"which must itself be a KL type.  It supports an empty constructor that "
"constructs an empty array, a copy constructor and assignment operator that "
"take a reference to the contents of the other array, as well as the "
"following methods:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:170
#: ..\..\source\ExtensionAuthoringGuide\types.rst:216
#: ..\..\source\ExtensionAuthoringGuide\types.rst:235
msgid "Returns the size (length) of the array."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:174
msgid ""
"Resize the array.  The new elements (if any) will be initialized using the "
"constructor for the given type."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:178
msgid "Append an element to the end of the array"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:182
#: ..\..\source\ExtensionAuthoringGuide\types.rst:199
#: ..\..\source\ExtensionAuthoringGuide\types.rst:220
msgid "The read-only array indexing operator."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:186
#: ..\..\source\ExtensionAuthoringGuide\types.rst:203
#: ..\..\source\ExtensionAuthoringGuide\types.rst:224
msgid ""
"The read-write array indexing operator.  It returns a modifiable reference "
"to the given element of the array."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:188
#: ..\..\source\ExtensionAuthoringGuide\types.rst:226
msgid ""
"Unlike KL, there is no checks for array indices when indexing into an array."
"  It is the responsibility of the programmer to ensure that the array index "
"is within bounds."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:190
msgid ""
"References returned from the array indexing operators should be considered "
"temporary and should not be stored in other variables.  Calling the "
"``resize`` method on a variable array may cause references to become "
"invalid."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:193
msgid ":samp:`KL::FixedArray<{Ty}, {size}>`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:195
msgid ""
"Provides the functionality of a KL fixed array of the type :samp:`{Ty}`, "
"which must itself be a KL type, of size :samp:{size} which must be an "
"unsigned integer.  It proves the usual empty and copy constructors and "
"assignment operators.  It provides the following specialized constructors "
"and methods:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:206
msgid ":samp:`KL::ExternalArray<{Ty}>`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:208
msgid ""
"Provides the functionality of a external array of the type :samp:`{Ty}`, "
"which must itself be a KL built-in or user-defined type.  It allows you to "
"construct a new array from a raw pointer and element count, along with the "
"usual empty and copy constructors and assignment operators.  It provides the"
" following specialized constructors and methods:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:212
msgid ""
"Constructs a new external array from a raw pointer and a size (element "
"count).  The external array does *not* take ownership of the data; it is the"
" responsibility of the extension author to manage the lifecycle of the "
"underlying data and to ensure that it outlives any use of the data anywhere "
"in |FABRIC_PRODUCT_NAME|."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:229
msgid ":samp:`KL::Dict<{KeyTy}, {ValueTy}>``"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:231
msgid ""
"Provides the functionality of a dictionary that maps keys of type "
":samp:`{KeyTy}` to values of type :samp:`ValueTy`.  :samp:`{KeyTy}` must be "
"either a simple type or :code:`KL::String`; :samp:`ValueTy` can be any KL "
"type.  It supports an empty constructor that constructs an empty dictionary,"
" a copy constructor and assignment operator that take a reference to the "
"contents of the other dictionary, as well as the following methods:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:239
msgid ""
"Returns ``true`` if and only if there is a value for the given key in the "
"dictionary."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:243
msgid ""
"The read-only dictionary indexing operator.  If there is no value for the "
"given key in the dictionary an exception is thrown."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:247
msgid ""
"Get a pointer to the value corresponding to the given key.  If there is no "
"value for the given key, this method returns ``0``."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:251
msgid ""
"The read-write array indexing operator.  It returns a mutable (read-write) "
"reference to the value for the key in the dictionary.  If there is no value "
"for the key, a new value is created for the key.  The initial value of the "
"new value is the default value for :samp:`ValueTy`."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:255
msgid ""
"Get the value for the given key from the dictionary, returning an mutable "
"(read-write) reference to the value.  If there is no value for the key, a "
"new value is created whose value is ``defaultValue``."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:257
msgid ""
"References returned from the array indexing operators should be considered "
"temporary and should not be stored in other variables.  Methods that "
"potential modify the dictionary can cause the references to become invalid, "
"leading to programming errors."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:260
msgid ":code:`KL::Object`"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:262
msgid ""
"The :code:`KL::Object` type is the equivalent of the KL :code:`Object` type "
"that refers to an arbitrary object.  It supports an empty constructor (which"
" constructs a null object reference), a copy constructor and an assignment "
"operator (taking a reference to the other object) as well as the ``==`` and "
"``!=`` comparison operators."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:267
msgid "User-Defined Types"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:269
msgid ""
"The KL :code:`struct`, :code:`interface` and :code:`object` types are user-"
"defined types.  They may be defined by the KL source files of the extension "
"or one of the other extensions that the extension requires."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:271
msgid ""
"User-defined types have C++ equivalents defined for them in the header "
"generated by the :command:`kl2edk` tool.  The following section detail usage"
" of these C++ equivalent types."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:276
msgid "Structures"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:278
msgid ""
"KL structures (defined using the KL :code:`struct` keyword) are be directly "
"represented by C++ structures.  Each member of the KL structure is provided "
"as a structure member in C++ with exactly the corresponding C++ type.  You "
"can therefore reference the members of an instance of the structure using "
"the usual :code:`.` operation, as well as performing all the other usual C++"
" structure operations."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:281
msgid "Mapping KL Structures to Third-Party API Structures"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:283
msgid ""
"Since the generated C++ KL structure maps directly to a plain C++ structure "
"with the KL types for its members, it is possible to pointer-cast the KL "
"structure to another structure using the :code:`reinterpret_cast` operator "
"in C++.  However, you must ensure the following about the target structure:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:285
msgid ""
"The structure must only contain simple KL types or other structures "
"containing simple KL types.  For a list of C++ types equivalent to the "
"simple KL types, see :ref:`types.simple.equivalent`."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:287
msgid ""
"The order of the members in the structure must be exactly the same in KL and"
" in C++"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:289
msgid ""
"The structure must use the default C++ alignment for the structure and its "
"members."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:294
msgid "Interfaces"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:296
msgid ""
"For each interface defined in the KL code there will be a C++ equivalent "
"with the same name defined in the generated header."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:298
msgid ""
"In the C++ class generated for the interface the methods of the interface "
"are provided through the :samp:`{interface}.{methodName}({arg}, {arg}, ...)`"
" call."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:300
msgid "Additionally, the C++ class provides:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:302
msgid "An empty constructor that constructs a null interface reference"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:304
msgid ""
"A copy constructor and an assignment operator that copy a reference to the "
"other interface"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:306
msgid ""
"The ``==`` and ``!=`` comparison operators that compare for interfaces to "
"point to the same object"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:308
msgid ""
"A conversion to the C++ type :code:`bool` as well as the :code:`operator !` "
"that can be used for checks for the interface reference being non-null or "
"null"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:310
#: ..\..\source\ExtensionAuthoringGuide\types.rst:359
msgid "For example:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:322
msgid ""
"then the corresponding C++ definition for :code:`CallIntMethod` should be:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:339
msgid "Objects"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:341
msgid ""
"For each object defined in the KL code there will be a C++ equivalent with "
"the same name defined in the generated header."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:343
msgid ""
"The members of the object are accessed through the "
":samp:`{object}->{memberName}` operation.  All of the members of the KL "
"structure are provided through this operation."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:345
msgid ""
"The methods of the object that belong to an interface that the object "
"implements are provided through the :samp:`{object}.{methodName}({arg}, "
"{arg}, ...)` call."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:347
msgid ""
"There is currently no way to call methods on the object that are not part of"
" an implemented interface."
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:349
msgid "An empty constructor that constructs a null object reference"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:351
msgid ""
"A static method :samp:`{objectType}\\:\\:Create()` constructs a new Object "
"of type :samp:`objectType` and returns a reference to it"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:353
msgid ""
"A copy constructor and an assignment operator that copy a reference to the "
"other object"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:355
msgid ""
"The ``==`` and ``!=`` comparison operators that compare for objects to point"
" to the same object"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:357
msgid ""
"A conversion to the C++ type :code:`bool` as well as the :code:`operator !` "
"that can be used for checks for the object reference being non-null or null"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:376
msgid ""
"then the corresponding C++ definition for :code:`DisplayObjectMembers` "
"should be:"
msgstr ""

#: ..\..\source\ExtensionAuthoringGuide\types.rst:395
msgid ""
"Refer to the EDKObjects sample located in "
"``$FABRIC_DIR/Samples/EDK/EDKObjects`` for a detailed example of exposing "
"object functionality using the EDK."
msgstr ""
