#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:4
msgid "Operators and Bindings"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:6
msgid ""
"The KL code that runs within the dependency graph and event graph is "
"contained in objects called Operators.  The same operator can be bound to "
"multiple Nodes and EventHandlers by using different Bindings (see below) "
"that share the same Operator."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:9
msgid "Operator Creation"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:11
msgid ""
"An Operator is created by calling :samp:`fabricClient.RT.createOperator`, "
"passing the name of the Operator as the first argument.  Operator names must"
" be unique and not shared with any Nodes, Events or EventHandlers."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:19
msgid "Setting Operator Source Code"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:21
msgid ""
"The source code contained in the Operator is set using the Operator's "
":samp:`setSourceCode` method.  It takes a string containing the KL source "
"code."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:23
msgid ""
"Source code is first usually loaded from an external resource, using eg. the"
" :samp:`fabricClient.loadResourceURL` function, rather than being included "
"as an inline string as is done in these examples."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:25
msgid ""
"After setting the source code, you can check if any warnings or errors were "
"generated by the KL compiler by calling the :samp:`getDiagnostics` method, "
"which returns an array of objects describing the warnings/errors, including "
"the level (warning/error), line number, column number and message.  You can "
"later retrieve the source code by calling the :samp:`getSourceCode` method."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:38
msgid "Setting the Operator Entry Point"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:40
msgid ""
"In addition to source code, an operator needs an entry point, which is the "
"name of the KL operator (see the :ref:`KLPG`) in the source code that should"
" be called when the operator is invoked.  Note that this *must* be an KL "
"operator and not a KL function.  The entry point is specified by calling the"
" :samp:`setEntryPoint` method.  By specifying the source code and entry "
"point separately, it is possible to have multiple possible entry points into"
" the same source code."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:50
msgid "Bindings"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:52
msgid ""
"To make an operator run on a Node or EventHandler, you must create a Binding"
" object which describes what data the KL operator arguments are bound to "
"when the operator is run."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:54
msgid ""
"It is possible to have multiple bindings that all share a single operator."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:56
msgid ""
"A binding object is created by calling "
":samp:`fabricClient.DG.createBinding`, and you set the Operator called by "
"the Binding by calling the Binding's :samp:`setOperator` method.  This "
"operator can later be retrieved by calling the Binding's :samp:`getOperator`"
" method."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:67
msgid "Binding Parameter Layouts"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:69
msgid ""
"The way in which the KL operator arguments are bound is specified by calling"
" the Binding's :samp:`setParameterLayout` method.  "
":samp:`setParameterLayout` takes a single parameter that is an array of "
"strings.  The length of the array must be equal to the number of parameters "
"taken by the KL operator in the Operator's source code, and each string "
"describes what data that parameter should bind to."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:71
msgid ""
"Such string is of the format :samp:`{object}.{member}`, or :samp:`{object}` "
"for a special usage which we will detail later.  The :samp:`{object}` part "
"refers to what Node, EventHandler or Event object contains the data to be "
"bound, as follows:"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:73
msgid ""
"If :samp:`{object}` is :samp:`self`, the data is contained on the object "
"where the binding is attached"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:75
msgid ""
"For Bindings that live on Nodes, :samp:`{object}` is the name of the direct "
"dependency Node that contains the data"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:77
msgid ""
"For Bindings that live on EventHandlers, :samp:`{object}` is the name of an "
"ancestor EventHandler in the call chain as specified by a call to its "
":samp:`setScopeName` method, or a Node that is connected to the EventHandler"
" through a call to the EventHandlers's :samp:`setScope` method."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:79
msgid ""
"The :samp:`{member}` part refers to the data member on the object specified "
"by :samp:`{object}`, with support for the following additional syntaxes:"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:81
msgid ""
"If :samp:`{member}` is simply the name of a member (eg. \"position\"), the "
"parameter will be bound to that member once for each slice.  The operator "
"will be invoked once for each slice of the Node, potentially in parallel.  "
"The KL parameter in the operator must be an :samp:`io` parameter whose type "
"is the type of the member."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:83
msgid ""
"If :samp:`{member}` is the name of a member followed by :samp:`[]` (eg. "
":samp:`position[]`), the parameter will be bound to a variable-length array "
"that contains the data for *all* the slices for that member.  The length of "
"the array will be equal to the slice count of the Node.  The KL parameter in"
" the operator must be an :samp:`io` parameter whose type is a variable-"
"length array of the type of the member."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:85
msgid ""
"If :samp:`{member}` is :samp:`index`, the parameter will be index of the "
"current slice for which the operator is being executed.  The parameter must "
"be an :samp:`in` parameter of type :samp:`Index` (or, equivalently, "
":samp:`Size`)"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:87
msgid ""
"If :samp:`{object}` is specified (instead of :samp:`{object}.{member}`), "
"then the parameter must be of type :samp:`Container`, which allows you to "
"get or set the Node slice count in KL. Calling :samp:`Container`'s "
":samp:`resize(Size)` method will immediately change the slice count of the "
"Node, and the :samp:`size()` method will return its current slice count. The"
" :samp:`resize(Size)` method requires that the parameter is specified as "
":samp:`io`."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\operators-bindings.rst:101
msgid ""
"Even when a Binding binds a parameter to a member of a dependency of a Node,"
" rather than a member of the Node itself, the parameter must still be "
"declared as an :samp:`io` parameter in KL.  This is a limitation of the "
"system which will be removed in the future; in fact, it will become required"
" that members of non-:samp:`self` objects be bound to :samp:`in` parameters."
msgstr ""
