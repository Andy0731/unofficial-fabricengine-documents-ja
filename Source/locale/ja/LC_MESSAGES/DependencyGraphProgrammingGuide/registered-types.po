#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:4
msgid "Registered Types"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:6
msgid ""
"|FABRIC_PRODUCT_NAME| supports a :dfn:`registered types` system whereby "
"user-defined compound types (ie. structures) are defined through JavaScript."
"  Once a type has been registered, it can be used to define members of Nodes"
" and EventHandlers (see below) as well as used in KL code."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:9
msgid "Registering a New Type"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:11
msgid ""
"To register a new type, call the ``fabricClient.RT.registerType`` function "
"with the name of the type as the first parameter and the "
":dfn:`specification` object as the second parameter.  The specification "
"object has the following members:"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:13
msgid "``members``"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:15
msgid ""
"An object containing the members to be contained in the type.  The key names"
" are the member names for the type and the key values are the names of "
"already-registered types or built-in KL types (see the :ref:`KLPG` for more "
"information on atomic types)."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:17
msgid ""
"It is possible to append brackets to obtain variable- or fixed-length arrays"
" as members, eg. ``Scalar[2][2]``, ``Scalar[][]`` and ``Scalar[2][][4]``."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:19
msgid "``constructor``"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:21
msgid ""
"A JavaScript or Python constructor that is used to provide the JavaScript or"
" Python \"prototype\" for objects values returned from the "
"|FABRIC_PRODUCT_NAME| core, as well as to provide a default value if none is"
" given."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:23
msgid "``defaultValue``"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:25
msgid "(optional) The default value for the type."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:27
msgid "klBindings"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:29
msgid ""
"(optional) KL code to include which provides operations involving the type, "
"such as :ref:`constructors <KLPG.constructor>`, methods and operators"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:31
msgid ""
"To get an object containing information about all the currently-registered "
"types, call ``fabricClient.RT.getRegisteredTypes()``."
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:34
msgid "Example of Type Registration"
msgstr ""

#: ..\..\source\DependencyGraphProgrammingGuide\registered-types.rst:36
msgid ""
"The following code registers a new |FABRIC_PRODUCT_NAME| type ``Vec3`` and "
"associates it with a Python type of the same name:"
msgstr ""
