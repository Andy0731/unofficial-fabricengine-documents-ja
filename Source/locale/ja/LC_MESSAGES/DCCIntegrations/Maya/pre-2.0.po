#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:4
msgid "Using the Splice Maya plugin (legacy)"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:6
msgid ""
"The Splice Maya (pre-2.0) feature are still supported in 2.0, but might be "
"deprecated in future release."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:8
msgid ""
"Launch Maya and load the Splice plugin, you should see a new entry in the "
"top menus which says :dfn:`Splice`. In order to start using the Splice "
"Editor UI you need to create a Splice Maya node, to do so just open the "
"Splice top menu and create a spliceMayaNode. Open maya's Attribute Editor "
"and click the button Open Splice Editor."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:10
msgid ""
"If the Splice Editor was already open it will simply refresh to point at the"
" currently selected node once you click the button in the Attribute Editor."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:12
msgid ""
"In order to make the node's interface compatible with a KL operator you need"
" to add some attributes and ports, to do so you can use the Splice Editor "
"and click on the button Add located under the Contained Ports part of the "
"Editor."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:14
msgid ""
"A Splice Node uses Ports to store and retrieve KL data, Ports can be "
"accessed within KL operators. If a Maya Attribute is added with the same "
"name of a Port then the Port's data is automatically synchronized with the "
"Maya attribute's data, the KL Port data will transfered in and out of maya "
"depending if the Port was set as input or output. Once the interface of the "
"node is defined in terms of ports and attributes you can add a KL operator "
"from the Splice Editor Add button, under the Contained Operators part of the"
" UI. When the operator is created the KL editor will show it along with the "
"ports interface to interact with it."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:16
msgid ""
"KL Operators are global to the scope of Creation Splice, they don't belong "
"exclusively to the node they've been created for and they can be applied to "
"every Splice Maya node that has a compatible interface."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:18
msgid ""
"That's it for the spliceMayaNode overview, have fun playing inside the body "
"of the KL operator, if new to the KL language please refer to the "
":ref:`KLPG`."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:23
msgid "Maya Nodes Types"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:25
msgid ""
"The Splice Maya plugin comes with three node types, the "
":dfn:`spliceMayaNode` is a generic MPxNode where you can attach almost every"
" kind of maya attribute type, it will be suited for any generic computation "
"such as rigging or simulation solvers."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:27
msgid ""
"The :dfn:`spliceMayaDeformer` is a deformer node that seamlessly works with "
"maya's deformation tools and commands, it comes with two arrays of points, "
"one as input and another for the output, any other necessary attribute can "
"still be added to this node once instantiated."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:29
msgid ""
"The :dfn:`spliceMayaDebugger` allows for custom OpenGL drawings generated "
"inside a KL operator to be visualized inside maya's 3D viewport. Drawing "
"inside a KL operator is done by using the InlineGeometryType."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:34
msgid "Scripted Splice"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:36
msgid ""
"Anything done with the Splice Editor graphical interface can also be "
"automated in MEL and Python via the fabricSplice command, thus offering the "
"possibility to include Splice nodes in scripted procedural rigs or other "
"kind of automated scene setups. Referencing external KL files is also "
"possible via the fabricSplice command, this could be useful to have KL "
"operators under source control or share them with other people or simply to "
"take advantage of external code editors. Once a scene is saved the code of "
"eachKL operator is also stored along with the path to the KL file, on scene "
"loading the code of the operator will be used if the specified KL file is "
"not found anymore."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:38
msgid ""
"For a full list of scripting actions and parameters, please see the "
":ref:`SPLICESCRIPTINGACTIONS` section."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:40
msgid ""
"The following examples show how to interact with the fabricSplice command "
"with Python syntax:"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:68
msgid "Port UI Limits"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:70
msgid ""
"Any unconsumed flag added to the :dfn:`addInputPort`, :dfn:`addOutputPort` "
"or :dfn:`addIOPort` actions will be setup as additional flag data on the "
"resulting ports. This data will also be persisted with the maya scene or "
"with exported splice files."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:73
msgid ""
"Some of the optional flags are used for UI hints, for example :dfn:`uiMin`, "
":dfn:`uiMax`, :dfn:`uiSoftMin` and :dfn:`uiSoftMax`. With these you can "
"define slider ranges for :dfn:`Integer` or :dfn:`Scalar` ports."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:81
msgid "Compound Attributes"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:85
msgid ""
"Using the :ref:`compoundparam` KL type maya compound attributes can now be "
"transfered to and from Splice. :ref:`compoundparam` objects are a way of "
"describing hierarchical parameters. With this version we support all of the "
"basic types, excluding geometries such as MFnMesh etc."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:87
msgid ""
"The actual compound attribute is not created by Splice however, it needs to "
"be created by the maya user (or responsible scripts). The Splice conversion "
"layer will then turn the data into the right nested data structure in KL. Of"
" course :ref:`compoundparam` objects supported hierarchical nesting, so you "
"can put a :ref:`compoundparam` into another :ref:`compoundparam`."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:130
msgid ""
"Aside from using MEL commands to generate the compound, you can also use "
"json. With this second approach the compound structure will also be "
"persisted as part of the splice file. The json elements for each compound "
"support the very same flags as the port generating commands. Also you can "
"nest compounds as well. Finally with this approach you can also create "
"arrays of compounds by using an array as the data type."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:168
msgid "Deformers"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:170
msgid ""
"Use the standard deformer command to create a node of type "
"spliceMayaDeformer:"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:176
msgid ""
"A spliceMayaDeformer uses a :ref:`polygonmesh` array port, the name has to "
"be \"meshes\"."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:187
msgid "Procedural Geometry"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:189
msgid ""
"Splice Maya Nodes can also generate procedural geometry by adding a "
"PolygonMesh output port and attribute, which will allow Splice to build the "
"Maya mesh with optimal performance."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:222
msgid "Custom KL DataTypes"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:224
msgid ""
"When working with complex networks of Splice Maya Nodes you might want to "
"also pass complex KL data structures from one node to another, this is "
"easily achieved by registering a new KL extension. KL extension can contain "
"pure KL code (aside from the ones providing binary libraries). To define a "
"new KL extension, simply implement a series KL files (or just one) and add a"
" fpm.json file to the same folder. The fpm.json file may look like this:"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:236
msgid ""
"To register a new extension location, first set a path to be scanned for KL "
"files using the environment variable :envvar:`FABRIC_EXTS_PATH`, do that "
"before to launch maya. Any fpm.json file in that path containing a struct "
"will be registered and the Kl struct will be made available inside KL "
"operators."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:239
msgid ""
"Your KL files will need to be named accordingly to the name of the struct "
"they will contain. Ex. MyStruct.kl defines: struct MyStruct{};"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:241
msgid ""
"To add a maya attribute capable of holding a Registered Type just use the "
"fabricSplice maya command as follows:"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:248
msgid ""
"Custom Registered Types can also be used to just hold some data even if it's"
" not intended to be passed to another node. To do that just add an output "
"port using the fabricSplice command without specifying to add a maya "
"attribute as well:"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:256
msgid "SpliceMayaData - Opaque KL Data"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:258
msgid ""
"Custom KL types can be setup to be opaque to Maya. This way you can connect "
"several of these attributes using the Maya graph, but Maya itself won't know"
" what the content of the data is. For this, as seen above, you need to use "
"the :dfn:`addSpliceMayaAttr` flag when adding a port."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:265
msgid ""
"This flag will cause the attribute to be of type :dfn:`SpliceMayaData`."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:267
msgid ""
"One caveat to keep in mind is that all SpliceMayaData ports can be "
"interconnected, even if the data structures they wrap are not compatible."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:270
msgid "Accessing Port Layout"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:272
msgid ""
"Since a splice node in maya can contain more ports than mapped attributes a "
"scripting facility is provided to gain access to that information. The "
"portInfo string is JSON encoded and provides the same information which is "
"also used during persistence of a splice file."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:279
msgid "Manipulating Port Data"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:281
msgid ""
"You can use ports inside a splice node as caches for internal data "
"structures. This is extremely useful when certain parts of the computation "
"should not be driven by splice itself, but by some external script. The data"
" is provided as JSON strings, and can therefore reflect any data structure "
"accessible within splice (excluding opaque data). Given the example of a "
"'Vec3' port called 'myVec', this is how you can set the data. Setting the "
"data also enables the persistence of that port, so the set data will be "
"saved alongside the maya scene."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:287
msgid ""
"To gain access to the data again, you can use another action of the "
"fabricSplice command like below. Not that getting of data works on all "
"ports, while setting of data only works for IN and IO ports."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:294
msgid "Maya Python FabricCore Client"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:296
msgid ""
"Aside from manipulating data through JSON and making use of getPortData and "
"setPortData, you can also use the new python client which ships with Splice "
"for Maya. You'll need to make sure that the python subfolder of the maya "
"module is part of the :envvar:`PYTHONPATH`. The first Splice node will "
"create the FabricCore client, but you can also manage the creation and "
"destruction of the client manually - for example if there is no splice maya "
"node in the scene yet."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:313
msgid ""
"Once the client exists, you can use it to do anything the core can do, of "
"course. One especially useful facility however is getting access to RTVals "
"stored within Splice nodes. This is even more efficient with KL object "
"RTVals, since they are just referenced and never copied into python. This "
"allows you to build custom UI, for example, which can interact with members "
"within a RTVal inside a Splice port, and even call methods on them."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:356
msgid "Dirty Mechanism"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:357
msgid ""
"Do avoid the execution of Splice's internal dirty mechanism, you can disable"
" it during an execution of script. This will speed up the performance of "
"scripts since any update will happen at the end of the script only."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:368
msgid "Forcing Port Persistence"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:370
msgid ""
"By default splice in maya will only store those ports that have simple types"
" and that are not arrays. This behavior can be overridden with a special "
"command if a complex port needs to be persisted in the scene:"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:379
msgid "Exporting Splice files"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:381
msgid ""
"To export the ascii representation of a Maya Splice node, simply select the "
"node in the hypergraph or in the node editor and hit :dfn:`Export Splice "
"Node` in the :dfn:`Fabric:Splice` top menu. This will save a text file "
"containing the full description of a splice node, including it's ports and "
"KL operators."
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:384
msgid "Importing Splice files"
msgstr ""

#: ..\..\source\DCCIntegrations\Maya\pre-2.0.rst:386
msgid ""
"To load a previously saved Fabric:Splice file, simply select a new "
"spliceMayaNode node in the hypergraph or in the node editor and hit "
":dfn:`Import Splice Node` in the :dfn:`Fabric:Splice` top menu. This will "
"load the splice file and create all of the ports, KL operators and Maya "
"attributes."
msgstr ""
