#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:2
msgid "Using the Splice Softimage plugin"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:4
msgid ""
"In order to start using the Splice Editor UI, click on the Fabric Menu and "
"choose :dfn:`Splice Editor`"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:6
msgid ""
"To create a new Splice operator you need to first pick the element in the "
"scene to output to. Currently allowed elements are kinematic states and "
"polygon mesh primitives. You may select multiple kinematic states / objects "
"and right click to end the picking session."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:8
msgid ""
"Once the SpliceOp is created you can re-open the Splice Editor UI by "
"selecting the operator and clicking the :dfn:`Splice Editor` menu entry from"
" the Fabric menu again."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:10
msgid ""
"With the Splice Editor UI open you can add :dfn:`parameters` to the SpliceOp"
" (standard Softimage parameters which are stored on the custom operator), "
"additional :dfn:`XSI ports` (port connections to kinematic states or polygon"
" mesh primitives) or so called :dfn:`Cache Ports` (internal ports which "
"don't communicate with Softimage). When performing a picking session please "
"follow the instructions stated in the status bar, and hit right click to end"
" a picking session."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:12
msgid ""
"Furthermore, Splice supports accessing values off the ICE system. For that "
"use the :dfn:`Add ICE Port` button, pick a name for the Splice port and "
"define the name of the ICEAttribute you want to read. Then choose the right "
"geometry storing the attribute during the picking session."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:14
msgid ""
"Aside from interacting with Ports you can also edit the KL operator stack on"
" each SpliceOp. You may add, remove or edit KL operators. New KL operators "
"will receive some auto generated KL code which makes accessing previously "
"defined ports easier. Hitting the 'Edit' button will set the edited KL "
"operator on the :dfn:`KL` tab."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:16
msgid ""
"KL Operators are global to the scope of Splice, they don't belong "
"exclusively to the node they've been created for and they can be applied to "
"every SpliceOp that has a compatible interface. This means you should choose"
" the name fo the KL operators consciously. If all KL operators are called "
"'testOp', this will create conflicts."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:18
msgid ""
"That's it for the SpliceOp overview. If you are new to the KL language "
"please refer to the :ref:`KLPG`."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:21
msgid "Scripting a SpliceOp and Referencing KL Files"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:23
msgid ""
"Anything done with the Splice Editor graphical interface can also be "
"automated through scripting via the fabricSplice command, thus offering the "
"possibility to include SpliceOp in scripted procedural rigs or other kind of"
" automated scene setups. Referencing external KL files is also possible via "
"the fabricSplice command, this could be useful to have KL operators under "
"source control or share them with other people or simply to take advantage "
"of external code editors. Once a scene is saved the code of eachKL operator "
"is also stored along with the path to the KL file, on scene loading the code"
" of the operator will be used if the specified KL file is not found anymore."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:25
msgid ""
"For a full list of scripting actions and parameters, please see the "
":ref:`SPLICESCRIPTINGACTIONS` section."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:27
msgid ""
"The following examples show how to interact with the fabricSplice command "
"with JScript syntax:"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:58
msgid "Generative Procedural Geometry"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:60
msgid ""
"Splice operators can also generate procedural geometry by adding a "
"PolygonMesh output port which will allow Splice to build the polygon mesh "
"with optimal performance."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:92
msgid "Gaining access to the information about the internal ports"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:94
msgid ""
"Since a SpliceOp in Softimage can contain more ports than mapped attributes,"
" a scripting facility is provided to gain access to that information. The "
"portInfo string is JSON encoded and provides the same information which is "
"also used during persistence of a splice file."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:103
msgid "Manipulating internal port data"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:105
msgid ""
"You can use ports inside a splice node as caches for internal data "
"structures. This is extremely useful when certain parts of the computation "
"are not driven by splice, but by some external script. The data is provided "
"as JSON strings, and can therefore reflect any data structure accessible "
"within splice (excluding opaque data). Given the example of a 'Vec3' port "
"called 'myVec', this is how you can set the data. Setting the data also "
"enables the persistence of that port, so the set data will be saved "
"alongside the maya scene."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:112
msgid ""
"To gain access to the data again, you can use another action of the "
"fabricSplice command like below. Not that getting of data works on all "
"ports, while setting of data only works for IN and IO ports."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:123
msgid "Accessing Port values as RTVals"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:125
msgid ""
"One especially useful facility is getting access to RTVals stored within "
"Splice nodes. This is even more efficient with KL object RTVals, since they "
"are just referenced and never copied into python. This allows you to build "
"custom UIs, for example, which can interact with members within a RTVal "
"inside a Splice port, and even call methods on them."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:153
msgid "Forcing nodes to store a port on disk:"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:155
msgid ""
"By default splice in maya will only store those ports that have simple types"
" and are not arrays. This behavior can be overridden with a special command "
"if a complex port needs to be persisted in the scene:"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:164
msgid "Exporting Splice files"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:166
msgid ""
"To export the ASCII representation of a SpliceOp, open the Splice Editor "
"with the output target selected and hit :dfn:`Save Splice`. This will save a"
" text file containing the full description of a Splice node, including it's "
"ports and KL operators."
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:169
msgid "Importing Splice files"
msgstr ""

#: ..\..\source\DCCIntegrations\Softimage\SoftimageSplice\usage.rst:171
msgid ""
"To load a previously saved Splice file, go the Fabric menu and choose "
":dfn:`Load Splice`.This will open a user interface to pick the targets for "
"each port. You can pick each element by selecting a cell in the grid view "
"and hitting 'Pick Target'. You may also create the default objects for "
"particular ports through this UI."
msgstr ""
