#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\CanvasProgrammerGuide\polymorphism.rst:4
msgid "Polymorphic nodes"
msgstr "多態性を持つノード（Polymorphic nodes）"

#: ..\..\source\CanvasProgrammerGuide\polymorphism.rst:6
msgid ""
"If you are looking for a less technical explanation please refer to :ref"
":`canvas-user-guide-polymorphism` in the user guide."
msgstr "ユーザーガイド内 :ref:`canvas-user-guide-polymorphism` により平易な説明があります。"

# ここ意味あやしい
# 基本的な構文は either A or B, subgraph uses kl func. と思う。
#: ..\..\source\CanvasProgrammerGuide\polymorphism.rst:8
msgid ""
"Polymorphism in Canvas is implemented as part of the code generation step. "
"Nodes which have polymorphic types are either a) a KL function node which "
"has a port with a polymorphic type specification or b) a subgraph which in "
"turn uses a polymorphic KL function. Polymorphic nodes are versatile "
"utilities which can be used with a variety of data types. It's due to the "
"compiler however to validate if the resulting generated code will work. Thus"
" you CAN CREATE ERRONEOUS GRAPHS using polymorphism."
msgstr ""
"Canvas での多態性（Polymorphism）はコード生成ステップの一部として実装されています。多態な型のノードであろうと、多態な型のポートを持つKL"
"関数ノードであろうと、サブグラフは多態なKL関数を使用することになります。多態性をもつノードは、さまざまなデータ型として使用可能であり汎用性の高いユーティリ"
"ティを具えます。したがって、出力されるコードは正常とコンパイラが判断してしまい、多態な型を使用した『不正なグラフを作成』することもできてしまいます。"

#: ..\..\source\CanvasProgrammerGuide\polymorphism.rst:12
msgid ""
"The KL2DFG command line utility will create polymorphic presets depending on"
" the configuration. Please see :ref:`canvas-programmer-guide-kl2dfg` for "
"more information."
msgstr ""
"KL2DFG コマンドラインユーティリティを使用し、設定に依存した、多態なプリセットを作成できます。 "
":ref:`canvas-programmer-guide-kl2dfg` に詳細な情報があります。"

#: ..\..\source\CanvasProgrammerGuide\polymorphism.rst:14
msgid ""
"Type resolution for polymorphic nodes is recursive. Canvas uses a type "
"mapping mechanism for polymorphic KL functions."
msgstr "多態なノードの型は再帰的に解決されます。Canvasは多態なKL関数に型のマッピングメカニズムを使用します。"

#: ..\..\source\CanvasProgrammerGuide\polymorphism.rst:17
msgid "Polymorphic type specification syntax"
msgstr "多態な型の構文"

#: ..\..\source\CanvasProgrammerGuide\polymorphism.rst:18
msgid ""
"To define a polymorphic port in a KL function use the following syntax:"
msgstr "多態なポートを定義するには、KL関数内で以下の記法に従います："

#: ..\..\source\CanvasProgrammerGuide\polymorphism.rst:28
msgid ""
"The example above implements a polymorphic array push node (which is already"
" part of the factory presets, of course). Connecting an array to the array "
"or result port will result in the element port to resolve, and vice versa."
msgstr ""
"上に上げた例では、多態な配列に追加（push）をおこないます。（勿論このようなノードはファクトリプリセット内に既に存在します）"
"他の配列をこの多態な配列に接続すると、resultポートは入力された配列の要素の型として解決されます。その逆も同様です。"

#: ..\..\source\CanvasProgrammerGuide\polymorphism.rst:32
msgid ""
"The example above implements a polymorphic dictionary lookup node (which is "
"also of course part of the factory presets). Both element and key "
"polymorphic types will resolve as soon as you connect a dictionary to it."
msgstr ""
"この例では、多態な辞書（dictionary）の要素の検索を実装しています。（勿論ファクトリプリセット内に既にあります）"
"この辞書の、要素、key、両方共多態な型であり、辞書に接続を行うことで型が解決されます。"
