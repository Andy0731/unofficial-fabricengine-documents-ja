#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:4
msgid "KL Function Editor"
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:6
msgid ""
"Within Canvas you can directly create custom KL function nodes. These nodes "
"run through the same just-in-time compilation process utilizing LLVM as do "
"graphs."
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:8
msgid ""
"To create custom KL functions, right click the empty space in a graph view "
"and choose :dfn:`New empty function`. This will create the function. To edit"
" it, double shift-click the new node or open the context menu by right-"
"clicking the node and choose :dfn:`Edit`. This will open the KL function "
"editor."
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:12
msgid ""
"The KL function editor essentially contains two sections: The port list and "
"the code window."
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:15
msgid "KL function ports"
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:16
msgid ""
"You can add and remove ports by defining their port type, name as well as "
"data type. By default port types are polymorphic, but you can pick fixed "
"types. If you want to know more about KL function polymorphism, please see "
":ref:`canvas-programmer-guide-polymorphism`. Alternatively you can also add "
"a port by right clicking any entry in the port list and choose :dfn:`Add new"
" port`."
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:18
msgid ""
"To remove a port, right click it and choose :dfn:`Delete port` in the "
"context menu."
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:20
msgid ""
"The KL function editor port list also supports the Ctrl-Enter (Add new port)"
" and Ctrl-Backspace (Delete port) keyboard shortcuts."
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:22
msgid "Ports can be referenced by name in the KL code below."
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:24
msgid ""
"If you add a port with a data type which is implemented in a KL extension "
"you have to add that extension to the :dfn:`Required Extensions` field on "
"the top left."
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:26
msgid ""
"Reordering of ports in the KL function editor is not yet supported, but will"
" be added in a future version."
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:29
msgid "KL code window"
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:31
msgid ""
"The main entry point for the KL function node is the dfgEntry block. The "
"Canvas compiler will replace the dfgEntry with the appropriate function "
"declaration, containing all of the ports and features. Defining three "
":dfn:`Float32` ports as in image above, you can define an entry point like "
"this:"
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:41
msgid ""
"Of course you can also implement operators directly within the KL function "
"editor. So given you have two ports of type :dfn:`Float32[]`, for example, "
"you can implement a task using PEX like this:"
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:54
msgid ""
"To compile the KL function click on the :dfn:`Save` button on the top left. "
"You can also reload the KL code for KL functions referencing an external "
"preset file using the :dfn:`Reload` button. When leaving the KL function "
"editor the UI will warn you in case you have unsaved changes."
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:56
msgid "For more information on KL's features, please see the :ref:`KLPG`."
msgstr ""

#: ..\..\source\CanvasProgrammerGuide\klfunctioneditor.rst:58
msgid ""
"Even though it's possible to define data types within a KL function node, we"
" highly recommend to implement KL types in a KL extension instead. This "
"makes it much easier to track changes within the type for the Canvas "
"compiler. You can ensure that the KL function loads the extension by adding "
"the extension to the :dfn:`Required extensions` text field on the top left "
"of the window."
msgstr ""
