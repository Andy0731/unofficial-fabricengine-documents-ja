#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:4
msgid "Variables"
msgstr "変数（Variable）"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:6
msgid ""
"If you are looking for a less technical explanation please refer to :ref"
":`canvas-user-guide-variables` in the user guide."
msgstr "ユーザガイド内 :ref:`canvas-user-guide-variables` により平易な説明があります。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:8
msgid ""
"Variables allow to declare and use named containers within a graph. "
"Variables hold stateful values that will continue to exist between graph "
"evaluations."
msgstr "変数は、グラフ内で名前付きコンテナを宣言し使用するためのものです。変数は状態を表す値を保持し、グラフ評価をまたいで存在します。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:12
msgid "Variables can be useful for various situations:"
msgstr "変数は様々に活用できます。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:14
msgid ""
"Creating a graph-owned value that evolves from evaluation to evaluation, "
"such as a counter or a simulation."
msgstr "カウンターやシミュレーションなどのように、評価から次の評価へと値を更新していくような、グラフ所有の値の作成。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:17
msgid ""
"Reducing the number of ports for exposing common contextual data to deep "
"sub-graphs, for example the `currentFrameIndex`. This can be seen as "
"implementing a closure, where the parent graph is setting up its own "
"evaluation context for all its sub-graphs."
msgstr ""
"ポートを削減します。サブグラフ深部へと共通のコンテクストデータを受け渡す（expose）ためのポート ―例えば `currentFrameIndex` "
"のようなポートを減らします。たとえば親グラフをサブグラフのため親グラフの評価コンテクストで設定し、クロージャーを実装し、実現します。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:22
msgid ""
"Using a unique, shared value: a KL Object created as a variable will be "
"accessible by other graphs (see :ref:`canvas_variables_scope`), allowing to "
"use shared storage."
msgstr ""
"一意な、共有可能な値として使用する：KLオブジェクトは他のグラフからアクセス可能な変数として作られ、共有保存場所として使用できる。（  "
":ref:`canvas_variables_scope` 参照）"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:26
msgid ""
"While variables provide stable and shared states between graph evaluations, "
"their values are not saved with the graph. After loading the graph, "
"variables are always reset to their initial value."
msgstr ""
"グラフ評価間をまたぎ状態を保存、共有できる一方、値そのものはグラフに保存されません。グラフが読み込まれると、変数の値は常に初期値へとリセットされます。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:32
msgid ""
"While variables can be used to build more powerful graphs, their "
"statefulness could lead to issues that are hard to debug and reproduce if "
"not used carefully."
msgstr ""
"変数は、より強力なグラフの作成に用いる事ができる一方、変数の「状態を持つ」という性質により、慎重に使用しないとデバッグや再現を困難にしてしまう恐れがあります"
"。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:39
msgid "Variable nodes"
msgstr "変数ノード（Variable nodes）"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:41
msgid ""
"In order to be read (*get*) or written (*set*), variables must first be "
"declared with a *new variable* node (see :ref:`canvas_variable_creation`). "
"The variable node holds the existence of its the actual value container, and"
" must exist in order to *get* or *set* variable's value."
msgstr ""
"読み取り（*get*）/ 書き込み（*set*）のため、変数は初めに *new variable* ノードとして宣言される必要があります。（ "
":ref:`canvas_variable_creation` 参照）変数ノードは、その変数の値を *get* / *set* "
"するため実際の値のコンテナの在り処を保持します。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:46
msgid ""
"The *new variable* node has an input port for specifying an initial value, "
"which will be pulled only at the very first graph evaluation. Its output "
"returns the current value of the node, and as such it acts like a *get* "
"node. However, the *new variable* node's output doesn't have to be connected"
" for to effectively declare the variable."
msgstr ""
"*new variable* ノードは初期値を決定する入力ポートを１つもちます。グラフ評価の一番初めに値を引いてきます。このノードは、ノードの現在の値を返し"
"、 *get* ノード同様の振舞をします。ただし、 *new variable* の出力は効果的な変数の宣言のため、接続されている必要はありません。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:52
msgid ""
"The *set* node will change the value of a variable, and its output will "
"return its new value. The *get* node only has an output port returning "
"variable's current value. The execution order (or port order) between *set* "
"and *get* nodes is very important, since the value of a *get* node will "
"differ if it executes before or after a *set* node. While it is guaranteed "
"that a *get* node connected on the left of a *set* node will execute before "
"it, other situations might require more care to ensure that the execution "
"order is the expected one."
msgstr ""
"*set* ノードは変数の値を変更し、新しい値を出力として返します。 *get* ノードは、変数の現在の値を返す出力ポートを１つのみ持ちます。 *set* "
"と *get* の実行順もしくはポートの順は、極めて重要です。なぜなら *get* ノードの値は *set* "
"ノードの前後どちらで実行されるかにより変化するためです。 *get* ノードが *set* ノードの左 ―つまり上流に接続されていると、 *set* "
"より先に実行されることが保証されます。いっぽう、他の状況では実行順が期待通りになるか注意が必要です。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:63
msgid ""
"If a *get* or *set* variable node refer to an undeclared or inaccessible "
"variable (see :ref:`canvas_variables_scope`), an error will be reported, for"
" example: `Node 'get': unable to resolve var path 'A'`. Note that this error"
" will be resolved as soon as an accessible variable is created."
msgstr ""
"*get*、 *set* ノードが未宣言、もしくはアクセス不能な変数（ :ref:`canvas_variables_scope` "
"参照）を参照してしまう場合、エラー\n、たとえば : `Node 'get': unable to resolve var path 'A'` "
"と表示されます。このエラーは変数がアクセス可能になると直ぐ解決されます。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:71
msgid "Creating variable nodes"
msgstr "変数ノードの作成"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:73
msgid ""
"In the Canvas application, variables nodes can be added in the following "
"ways:"
msgstr "Canvas アプリケーションでは、変数ノードは以下の方法で作成します。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:75
msgid "In the Canvas Graph window, right-click will bring a contextual menu:"
msgstr "Canvas グラフウィンドウより、右クリックのコンテキストメニューから："

#: ..\..\source\CanvasProgrammerGuide\variables.rst:77
msgid ""
"*New Variable* will open the *New Variable* dialog to define a new variable "
"in the current graph."
msgstr "*New Variable* により *New Variable* ダイアログが表示され、現在のグラフに新しい変数を定義します。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:79
msgid "*Read Variable (Get)* will add a *get variable* node."
msgstr "*Read Variable (Get)* により *get variable* ノードを追加します。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:81
msgid "*Write Variable (Set)* will add a *set variable* node."
msgstr "*Write Variable (Set)* により *set variable* ノードを追加します。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:83
msgid ""
"In the Canvas Graph window, the *Tab* key will open a search widget in "
"which:"
msgstr "Canvas グラフウィンドより、  *Tab* キーを押し検索ウィジェットを開き："

#: ..\..\source\CanvasProgrammerGuide\variables.rst:85
msgid ""
"typing \"var.\" will open the *New Variable* dialog to define a new variable"
" in the current graph."
msgstr "\"var.\" とキー入力し、 *New Variable* ダイアログから現在のグラフに変数を定義します。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:87
msgid ""
"typing \"get.\" will give a list of available variables that are accessible "
"from the current graph, and selecting one of these will create a *get* node "
"for that variable."
msgstr "\"get.\" とキー入力し、現在のグラフよりアクセス可能な変数一覧を得、必要な変数を選び *get* ノードを作成します。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:91
msgid ""
"typing \"set.\" will a list of available variables that are accessible from "
"the current graph, and selecting one of these  will create a *set* node for "
"that variable."
msgstr "\"set.\" とキー入力し、現在のグラフよりアクセス可能な変数一覧を得、必要な変数を選び *set* ノードを作成します。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:95
msgid ""
"The explorer window has a *Variables* root item which shows the path of "
"existing graph variables. Dropping these in the Canvas Graph window will "
"create a *get variable* node with the **absolute path** of the variable."
msgstr ""
"エクスプローラウィンドより、 *Variables* を開き、現在のグラフ中に存在する変数のパスを得ます。Canvas "
"グラフウィンドにドラッグ・アンド・ドロップし、 *get variable* ノードをそのノードの **absolute path** 付で作成します。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:103
msgid "Variable scope"
msgstr "変数のスコープ"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:105
msgid ""
"While variables are always accessible from the graph where they are declared"
" (*new variable* node), they might be accessible from other graphs based on "
"some simple scoping rules."
msgstr ""
"変数はその変数を定義（*new variable* ノード）したグラフからは常にアクセス可能な一方、それ以外のグラフからは、シンプルなスコープのルールに則っ"
"たアクセスが可能です。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:109
msgid ""
"In order to bind a *get* or *set* node to a variable, the variable path must"
" resolve to an accessible variable. The variable will first be searched in "
"the same graph. If not found, the variable will be searched in the parent "
"graph, and so on until the top graph is reached."
msgstr ""
"*get* 、 *set* ノードを変数に紐付けるため、変数のパスはアクセス可能に解決される必要があります。初めに同じグラフ内の変数を検索します。見つからな"
"いと、親のグラフ内を検索し、トップグラフまで遡ります。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:114
msgid ""
"If not found, the variable path will then be resolved as an *absolute path*,"
" that is, its path from the top graph down to its actual declaration (*new "
"variable*) node, for example `myGraph.mySubGraph.A`."
msgstr ""
"それでも見つからない場合、変数のパスは *絶対パス* として解決されます。これはトップグラフから、そのノードの実際の宣言のあるパスです。例えば、 "
"`myGraph.mySubGraph.A` となります。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:119
msgid ""
"Because variables are searched from the current graph and up, this allows to"
" implement *closures*, and these can be overridden by children graphs. For "
"example, a `Time` variable could be defined at the top graph level, and a "
"sub-graph could implement time remapping by defining its own relative `Time`"
" with a different value. Of course this assumes that sub-graphs are "
"accessing the time with a *get Time* node."
msgstr ""
"変数は現在のグラフから上に向かって検索されるので、 *クロージャー* の実装や、子グラフでのオーバーライドが可能になります。例えば、 `Time` "
"変数を最上位グラフで定義し、サブグラフではそれ独自の値で `Time` をリマップするよう実装できます。もちろん、 *get Time* ノードによりその "
"time 取得できます。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:127
msgid ""
"Because variable name bindings are dynamically resolved at graph "
"modification time, it is fine for a preset to require a variable (*get* or "
"*set* node) not declared inside it. As such, it assumes that the variable "
"will be defined by its parent graphs."
msgstr ""
"変数名はグラフの編集時に動的に解決されるため、プリセットではそのプリセット内部で変数 (*get* や *set* "
"ノード)を宣言しないようにししましょう。変数は親のグラフ内で定義されることを想定しています。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:135
msgid "Variable versus Cache"
msgstr "変数 vs キャッシュ"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:137
msgid ""
"While both a cache node and a variable create a stateful value container "
"within a graph, the following differences should be noted:"
msgstr "キャッシュノードも変数ノードも、グラフ中において状態を持つ値のコンテナとして作成されますが、以下の違いに留意してください："

#: ..\..\source\CanvasProgrammerGuide\variables.rst:140
msgid ""
"A cache node will be recomputed if its input value or sub-graph changes, "
"whereas variables' value is initialized only at the first evaluation. As "
"such, a variable can be used to ensure that a same KL object is reused for "
"all graph evaluations (if no *set variable* node sets a new object)."
msgstr ""
"キャッシュノードは、自身の入力ポートもしくはサブグラフが変更されると再計算されます。変数ノードでは、値は初めての評価時の初期化のみです。このように変数は、あ"
"るKLオブジェクトが、全グラフの評価において間違いなく再利用されることを期待し使用することができます。( *set variable* "
"ノードで新しいオブジェクト割当をしていない場合)"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:145
msgid ""
"A cache node should only be used for performance, as it has no effect on the"
" actual graph result. However, variables can have an effect on the behavior "
"of the graph because they can accumulate changes from evaluation to "
"evaluation."
msgstr ""
"キャッシュノードは、パフォーマンスのためだけに使用するべきです。実際のグラフ評価に影響を与えてはいけません。一方、変数は、評価から次の評価へと変更を蓄積して"
"いくため、グラフの挙動に影響を与えます。"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:153
msgid "Example"
msgstr "例"

#: ..\..\source\CanvasProgrammerGuide\variables.rst:155
msgid ""
"In the example below, the `GetElapsedSeconds` preset initializes the "
"`lastTicks` variable as the current ticks. Then, at each evaluation, the "
"existing `lastTicks` value gets compared with the newly updated value, and "
"the difference is outputted in seconds."
msgstr ""
"以下の例では `GetElapsedSeconds` プリセットが、 `lastTicks` 変数を現在の印として初期化します。すると各評価で、 "
"`lastTicks` の値は新規更新される値と比較され、毎秒毎に別の値を出力します。"
