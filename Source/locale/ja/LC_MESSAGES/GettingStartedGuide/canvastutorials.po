#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 18:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:4
msgid "Fabric Standalone Tutorials"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:7
msgid "Simple Hello World"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:9
msgid ""
"In this tutorial you will learn how to create nodes, how to connect up ports"
" and how to assign values to untyped (black) ports."
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:11
msgid ""
"Nodes and ports are key concepts within Canvas. As you learn, you will find "
"yourself building more complex graphs, but the real power is in joining "
"multiple nodes together to create a tool that simplifies your workflow and "
"improves performance."
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:13
msgid "Launch :dfn:`Fabric Standalone` (see :ref:`GETTINGSTARTED_FIRSTSTEPS`)"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:15
msgid ""
"Create a report node (Func.Report) - try hitting tab and type *rep* for "
"example"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:17
msgid ""
"Expose the value port both as an input as well as an output (drag `report` "
"node's left connection to left panel's Expose port, do the same on the "
"right)"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:19
msgid ""
"Right click the input port (since it has no type), choose `Edit` and assign "
"a *Float32* as the `data type`"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:21
msgid "Show the Log Messages Window  (*Window* -> *Log Messages*)"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:23
msgid ""
"Double click the left panel to inspect the exposed ports in the value editor"
" and pull the value_2 slider to see the log reporting the change."
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:28
msgid "First Math Formula"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:30
msgid ""
"In this tutorial we will do a linear interpolation between two vectors and "
"add the result to the original vector, then we will encapsulate this "
"functionality into a graph. Math nodes are the back bone of most rigging "
"tasks or simulation tasks, so it's good to start simple and build up from "
"here."
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:32
msgid ""
"Create a generic Func.LinearInterpolate node. It will show in red since the "
"type has not been defined yet and can't be evaluated."
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:36
msgid "Expose the *this*, *other* and *t* ports as inputs"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:40
msgid "Edit the this port type to Vec3. this and other will change to yellow."
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:44
msgid "Create an Add node (Math.Add)"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:46
msgid ""
"Connect the result of the LinearInterpolate to the *lhs* port from the Add "
"node"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:48
msgid ""
"Connect the *this* port of the LinearInterpolate to the *rhs* port of the "
"Add node"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:50
msgid "Expose the Add node's result to the sidebar"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:54
msgid "Select both nodes"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:56
msgid ""
"Right click one of them and choose *Implode Nodes*, using *MyFormula* as the"
" name"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:58
msgid ""
"Double click the left panel to inspect the exposed ports in the value editor"
" and fill in some values and with the *t* slider"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:63
msgid "Animated Geometry"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:65
msgid ""
"In this tutorial we'll create some procedural geometry and draw it on the "
"screen. Canvas can be used to massage geometry, which is a very powerful "
"concept. Even though this example is simple the concept also applies to "
"scenarios such as loading data from Alembic or other formats and complex "
"procedural content. Given that Canvas graphs are portable this allows to "
"build geometry pipelines between DCCs."
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:67
msgid "Create a GetTorus node (Create.GetTorus)"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:69
msgid "Create a DrawMesh node (Display.DrawMesh)"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:71
msgid ""
"Connect the mesh output port from GetTorus to the mesh input port in "
"DrawMesh"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:73
msgid ""
"Connect the drawThis output port from DrawMesh to the right Expose ports "
"panel"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:77
msgid ""
"Create a new Float32 input port called *timeline*, which will automatically "
"access the time in the graph"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:79
msgid ""
"Connect the timeline port to the inner and outer radius of the Add Torus "
"node"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:81
msgid "Pull on the time slider and see how the torus grows."
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:86
msgid "Custom KL Function"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:88
msgid ""
"Writing KL function nodes is a very powerful feature in Canvas, since some "
"problems are better suitable for code than graphs. In this tutorial we'll "
"create a custom KL function node."
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:90
msgid ""
"Right click in Canvas, and choose *New empty function*, using *MyMultiply* "
"as the name"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:94
msgid "Shift double click on the node to enter the function definition dialog"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:96
msgid ""
"Fill in the name of the first port with the mode set to *in*, name to *a* "
"and the type to *Float32*"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:98
msgid ""
"Add another port by hitting Ctrl+Enter or right click and choose *Add new "
"port*"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:100
msgid ""
"Fill in the name of the second port with the mode set to *in*, name to *b* "
"and the type to *Float32*"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:102
msgid ""
"Add the last port with the mode set to *out*, name to *result* and the type "
"to *Float32*"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:104
msgid "For the source code use: *result = a + a + b;*"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:108
msgid "Hit *Save* and *Go Up* afterwards"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:110
msgid "Expose the a and b ports in the left panel"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:112
msgid "Expose the result in the right panel"
msgstr ""

#: ..\..\source\GettingStartedGuide\canvastutorials.rst:114
msgid ""
"Double click the left panel to inspect the exposed ports in the value editor"
" and see how the result changes accordingly"
msgstr ""
