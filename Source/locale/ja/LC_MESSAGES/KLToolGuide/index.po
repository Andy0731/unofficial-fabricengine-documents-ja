#
msgid ""
msgstr ""
"Project-Id-Version: Fabric Engine 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-12 18:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.3\n"

#: ../../source/KLToolGuide/index.rst:4
msgid "Using the KL Tool to Develop and Debug Extensions"
msgstr "KL Tool を使用してエクステンションの開発・デバッグ"

#: ../../source/KLToolGuide/index.rst:10
msgid "|FABRIC_PRODUCT_NAME| version |FABRIC_VERSION|"
msgstr ""

#: ../../source/KLToolGuide/index.rst:11
msgid "|FABRIC_COPYRIGHT|"
msgstr ""

#: ../../source/KLToolGuide/index.rst:15
msgid "The KL Tool"
msgstr "KL Tool"

#: ../../source/KLToolGuide/index.rst:17
msgid ""
"Distributed with Fabric Engine is a command-line executable :file:`kl` "
"(:file:`kl.exe` on Windows) under the :file:`bin/` folder in the Fabric "
"Engine distribution.  It is referred to as the :dfn:`KL tool`."
msgstr ""
"Fabric Engineにはコマンドラインで実行可能な :file:`kl` (Windowsでは :file:`kl.exe`) が "
":file:`bin/` フォルダ以下に付属します。これを :dfn:`KL tool` を称します。"

#: ../../source/KLToolGuide/index.rst:21
msgid ""
"The KL tool enables running KL programs from the command line and "
"reporting results. The KL tool is used throughout the internal unit test "
"suite at Fabric Software. In addition, the KL tool can be very useful in "
"the development of your own custom KL extensions."
msgstr ""
"KL tool によりコマンドラインからKLプログラムを実行し、結果をリポートさせることができます。Fabric Software 社内では KL"
" tool を内部のユニットテストスイート全体に使用しています。さらに KL tool は独自の "
"KLエクステンション開発においてもとても役立ちます。"

#: ../../source/KLToolGuide/index.rst:26
msgid ""
"When a Fabric Engine environment is set up by sourcing "
":file:`environment.sh` at the root level of the Fabric Engine "
"distribution, or by double-clicking :file:`prompt.bat` on Windows, the KL"
" tool should be available on your :envvar:`PATH` and can be run on the "
"command line as the command :file:`kl`. You can verify that it is working"
" by running :command:`kl --help`, which should show you all the options "
"available."
msgstr ""
"Fabric Engine の環境をセットアップ ―Fabric Engine 配布物ののルートに存在する "
":file:`environment.sh` の読み込み（source） あるいはwindowsでは :file:`prompt.bat` "
"のダブルクリック― すると、KL tool が  :envvar:`PATH` に通り、コマンドラインから単に :file:`kl` "
"とするだけで実行可能になります。 :command:`kl --help` "
"と実行することで利用可能なオプションを表示し、正常に動作しているかの確認ができます。"

#: ../../source/KLToolGuide/index.rst:34
msgid "Compiling and Evaluating KL Source Files with the KL Tool"
msgstr "KL Tool を使用しKLソースファイルのコンパイルと評価"

#: ../../source/KLToolGuide/index.rst:36
msgid ""
"The KL tool should be run providing the name of a KL source file to "
"compile and run. The provided KL source file is normally a small text "
"file containing an entry operator (see below) and some code to generate "
"output. For example, if the file :file:`MyTest.kl` contained KL source "
"code, you would run it in the KL tool with the command::"
msgstr ""
"KL tool にソースファイルの名前を指定し実行し、コンパイルし実行しまます。与えられたソースファイルは通常、entry "
"オペレータ（以下に詳述）と、幾つかの出力を生成するコードからなる小規模なテキストファイルです。例えば、KLソースコードを含む "
":file:`MyTest.kl` を KL tool から実行するには以下のコマンドです::"

#: ../../source/KLToolGuide/index.rst:46
msgid "The ``entry()`` Operator"
msgstr "``entry()`` オペレータ"

#: ../../source/KLToolGuide/index.rst:48
msgid ""
"The KL tool will look for an operator called ``entry`` taking zero "
"arguments within the code. This operator will be called by the KL tool "
"after it has compiled the source code."
msgstr ""
"KL tool は ``entry`` "
"と呼ばれる引数０個をとるオペレータをコード中から探します。このオペレータはソースコードコンパイル後に呼びだされます。"

#: ../../source/KLToolGuide/index.rst:59
msgid "Testing Extensions"
msgstr "エクステンションのテスト"

#: ../../source/KLToolGuide/index.rst:61
msgid ""
"Often, a simple KL source file can be written that loads and performs "
"various tests on your extension. Simply by including the ``require "
"MyExtension;`` statement at the beginning of the file will cause the "
"functionality of your entire extension to included. The ``require`` "
"statement will also validate that your extension does not include any "
"syntactic errors. If the compilation of the extension as well as the code"
" in the KL source file that requires it is successful, then the entry "
"operator will be invoked."
msgstr ""
"独自エクステンションの種々のテストの読み込みと実行のために、シンプルなソースコードを記述することがよくあります。単に ``require "
"MyExtension;`` とファイル先頭にインクルードし、インクルードされたエクステンション全体の機能性を生じます。 ``require`` "
"文によりさらに、エクステンションに文法エラーが無いかも検証します。エクステンションやそれに必要なKLソースコードのコンパイルが成功すると、entryオペレータが呼び出されます。"

#: ../../source/KLToolGuide/index.rst:69
msgid ""
"In order to test your extension, the KL source file will will typically "
"construct objects and structs defined in your extension, and test the "
"functions by invoking them and reporting the results."
msgstr "エクステンションをテストするため、KLソースファイルでは通常、エクステンション内に定義されたオブジェクトと構造体を構築（construct）し、それらを呼び出し結果をリポートし、機能のテストを行います。"

#: ../../source/KLToolGuide/index.rst:75
msgid ""
"It is better to avoid reporting entire data structures, as these can "
"change without breaking the behavior of the code. Instead, consider "
"invoking methods on your types and check the results. Avoid testing "
"internal methods that are not intended to be exposed to users.Your "
"extension should define methods that are expected to be used in other "
"extensions, or in operators in Splice. These methods define the interface"
" to your extension, and should be tested thoroughly.It is good practice "
"to use access modifiers such as :code:`public` and :code:`private` to "
"control the external API to your objects and structs; see "
":ref:`KLPG.types.member-access` for more details."
msgstr ""
"データ構造を丸々リポートさせることは避けたほうが良いでしょう。コードの振る舞いを破壊せず変更が利くようにするためです。かわりに、カスタム型に対するメソッドの呼び出しを検討し、結果をチェックしましょう。internal"
" "
"メソッドのテストは避けます。ユーザから隠蔽されていることが期待されているためです。独自のエクステンションでは、他のエクステンションや、Splice/Canvasオペレータから使用されることを想定しメソッドを定義しましょう。これらのメソッドによって独自エクステンションへのインタフェースを定義し、徹底的にテストするべきです。アクセス修飾子"
" ―  :code:`public`, :code:`private` "
"により、独自オブジェクトや構造体への外部APIの制御することはとても良いプラクティスです。 :ref:`KLPG.types.member-"
"access` を参照してください。"

#: ../../source/KLToolGuide/index.rst:95
msgid "Output to a Text File"
msgstr "テキストファイルへの出力"

#: ../../source/KLToolGuide/index.rst:97
msgid ""
"The output of the KL tool can be sent to a text file by using the "
":code:`>` shell operator::"
msgstr "KL tool の出力は :code:`>` shell オペレータを使用しテキストファイルに送ります::"

#: ../../source/KLToolGuide/index.rst:102
msgid ""
"This can be useful when the test generates a lot of output, or when you "
"want to search through the output in a text editor.  It is also useful "
"for generating the file with correct output for unit test cases."
msgstr "テストが大量の出力を生成する場合や、テキストエディタを利用し検索を行う場合などとても有用です。もちろんユニットテストの正しい出力結果ファイルを生成する場合にもつかえます。"

#: ../../source/KLToolGuide/index.rst:107
msgid "Setting up Unit Tests that Use the KL Tool"
msgstr "KL Tool のユニットテストセットアップへの利用"

#: ../../source/KLToolGuide/index.rst:109
msgid ""
"Unit testing systems are easy to setup using the KL tool. Unit tests "
"typically compare a reference output against the current output to "
"determine if the behavior of your code has changed."
msgstr ""
"ユニットテストシステムは KL Tool "
"を利用し簡単にセットアップ可能です。典型的にユニットテストは参照する出力と、正答となる出力結果を比較し、コードの動作が変わっていないかを判断します。"

#: ../../source/KLToolGuide/index.rst:113
msgid ""
"If you are using Linux or OS X, or a mingw shell on Windows, you can use "
"the :command:`cmp` and :command:`diff` utilities to create simple scripts"
" to perform tests.  A sample such script might be:"
msgstr ""
"Linux や OS X, Windows の mingw シェルなどを利用中であれば、 :command:`cmp` や "
":command:`diff` ユーティリティを利用し、テストを実行する簡単なスクリプトが作成できます。このように記述します:"

#: ../../source/KLToolGuide/index.rst:150
msgid ""
"This script expects, for a given KL source file :file:`test.kl`, for "
"there to be a corresponding file :file:`test.out` with the correct "
"output.  If this script is placed in a file such as :file:`verify.sh`, "
"you can then run::"
msgstr ""
"このスクリプトは、 :file:`test.kl` ソースファイルを受け取り、入力ファイルに対応した正しい出力結果が記載された "
":file:`test.out`  が存在することを期待しています。このスクリプトを :file:`verify.sh` "
"などと保存したとすると、実行するには::"

#: ../../source/KLToolGuide/index.rst:156
msgid ""
"to see whether the output of :file:`test.kl` matches the contents of "
":file:`test.out`."
msgstr ":file:`test.kl` の出力結果が :file:`test.out` の内容と一致するかどうかを確認します。"

#: ../../source/KLToolGuide/index.rst:159
msgid ""
"More complex scripts can be written for testing.  The following example "
"Python code runs the KL tool and compares the output against a reference "
"file. The reference file will be generated if it does not exist, or the "
":code:`--update True` option is set."
msgstr ""
"テストのためより複雑なスクリプトを書くことも可能です。次の例では Python から KL Tool "
"を実行し、出力をレファレンスファイルと比較します。レファレンスファイルが存在しない場合、あるいは  :code:`--update True`  "
"オプションが与えられた場合はレファレンスを生成します。"

#: ../../source/KLToolGuide/index.rst:202
msgid ""
"Place the python code above in a python file called (for example) "
":file:`pythonTester.py`. You would then run it passing a unit test KL "
"source file to test against."
msgstr ""
"上記の python コードを例えば :file:`pythonTester.py` "
"ファイルとして保存します。KLソースファイルをテストするためユニットテストを実行します。"

#: ../../source/KLToolGuide/index.rst:210
msgid "To update test results, run the tester with the --update argument."
msgstr "テスト結果をアップデートするには、テスターに --update 引数を与え実行します。"

#: ../../source/KLToolGuide/index.rst:214
msgid "​  python pythonTester.py test.kl --update"
msgstr ""

#: ../../source/KLToolGuide/index.rst:216
msgid ""
"Setting up a unit testing framework for your custom extensions and "
"running them regularly will help catch changes that might break your "
"APIs."
msgstr "独自のエクステンションにユニットテストフレームワークを設定し、それらテストを定期的に実行すると、APIに対する破壊的変更を捕捉する助けとなるでしょう。"

#: ../../source/KLToolGuide/index.rst:220
msgid "Indices and Tables"
msgstr "索引"

#: ../../source/KLToolGuide/index.rst:222
msgid ":ref:`genindex`"
msgstr ""

#: ../../source/KLToolGuide/index.rst:223
msgid ":ref:`search`"
msgstr ""

#~ msgid "​  python pythonTester.py test.kl --update"
#~ msgstr " "

